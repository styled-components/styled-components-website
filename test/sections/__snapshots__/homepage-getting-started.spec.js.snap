// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`HomepageGettingStarted renders correctly 1`] = `
.c10 {
  display: inline-block;
  font-family: "Operator Mono SSm A","Operator Mono SSm B",monospace;
  font-size: 90%;
  font-weight: 300;
  padding: 0 0.05em 0.1em;
  vertical-align: bottom;
  line-height: 1.4;
}

.c16 {
  box-shadow: 0.05555555555555555rem 0.05555555555555555rem 1.1111111111111112rem rgba(20,20,20,0.27);
  overflow: hidden;
  margin: 1.9444444444444444rem 0;
  text-align: left;
}

.c17 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: stretch;
  -webkit-justify-content: stretch;
  -ms-flex-pack: stretch;
  justify-content: stretch;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
}

.c18 {
  background: #1d1f27;
  font-size: 0.8rem;
  font-family: "Operator Mono SSm A","Operator Mono SSm B",monospace;
  font-weight: 300;
  height: 22.22222222222222rem;
  overflow-y: scroll;
  overflow-x: hidden;
  cursor: text;
  white-space: pre-wrap;
  -webkit-flex-basis: 50%;
  -ms-flex-basis: 50%;
  flex-basis: 50%;
  width: 50%;
  max-width: 50%;
}

.c19 {
  position: relative;
  padding: 0.5rem;
  background: white;
  color: black;
  height: auto;
  overflow: hidden;
  -webkit-flex-basis: 50%;
  -ms-flex-basis: 50%;
  flex-basis: 50%;
  width: 50%;
  max-width: 50%;
}

.c22 {
  display: block;
  width: 100%;
  padding: 0.4444444444444444rem;
  background: #ff5555;
  color: white;
  font-size: 0.8rem;
  font-family: "Avenir Next",-apple-system,BlinkMacSystemFont,"Segoe UI",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  white-space: pre;
}

.c13 {
  background: #1d1f27;
  font-size: 0.8rem;
  font-family: "Operator Mono SSm A","Operator Mono SSm B",monospace;
  font-weight: 300;
  white-space: pre-wrap;
  border-radius: 0.16666666666666666rem;
  box-shadow: 1px 1px 20px rgba(20,20,20,0.27);
  margin: 1.9444444444444444rem 0;
  overflow-x: hidden;
}

.c14 {
  color: rgb(219,112,147);
  text-decoration: underline;
  font-weight: 600;
  cursor: pointer;
}

.c0 {
  width: 56.888888888888886rem;
  max-width: 100%;
  margin: 0 auto;
  padding: 5rem 2.2222222222222223rem 1.6666666666666667rem 2.2222222222222223rem;
  box-sizing: border-box;
  font-family: -apple-system,BlinkMacSystemFont,"Segoe UI",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  -webkit-transition: -webkit-transform 150ms ease-out;
  -webkit-transition: transform 150ms ease-out;
  transition: transform 150ms ease-out;
}

.c3 {
  display: block;
  text-align: left;
  width: 100%;
  color: rgb(243,182,97);
  font-size: 2.3333333333333335rem;
  font-weight: bold;
  font-family: "Avenir Next",-apple-system,BlinkMacSystemFont,"Segoe UI",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
}

.c5 {
  font-size: 1.7777777777777777rem;
  font-weight: 500;
  font-family: "Avenir Next",-apple-system,BlinkMacSystemFont,"Segoe UI",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
}

.c6 {
  position: relative;
  display: block;
  visibility: hidden;
  height: 0;
  top: -3.888888888888889rem;
}

.c8 {
  display: none;
  position: absolute;
  left: 0;
  color: inherit;
}

.c9 {
  width: 1.1111111111111112rem;
  opacity: 0.7;
  margin-top: -0.2777777777777778rem;
}

.c9:hover {
  opacity: 0.9;
}

.c4 {
  position: relative;
  margin-left: -1.6666666666666667rem;
  padding-left: 1.6666666666666667rem;
}

.c4:hover .c7 {
  display: inline-block;
}

.c1 {
  text-align: center;
}

.c2 {
  margin: 0 0.5em 3em;
  height: 1.5em;
}

.c11 {
  border-radius: 3px;
  padding: 0.25em 1em;
  margin: 0 1em;
  background: transparent;
  color: palevioletred;
  border: 2px solid palevioletred;
}

.c12 {
  border-radius: 3px;
  padding: 0.25em 1em;
  margin: 0 1em;
  background: transparent;
  color: palevioletred;
  border: 2px solid palevioletred;
  background: palevioletred;
  color: white;
}

.c15 {
  border-radius: 3px;
  padding: 0.25em 1em;
  background: transparent;
  color: palevioletred;
  border: 2px solid palevioletred;
}

.c20 {
  border-radius: 3px;
  padding: 0.25em 1em;
  margin: 0 1em;
  background: transparent;
  color: palevioletred;
  border: 2px solid palevioletred;
}

.c21 {
  border-radius: 3px;
  padding: 0.25em 1em;
  margin: 0 1em;
  background: transparent;
  color: palevioletred;
  border: 2px solid palevioletred;
  background: palevioletred;
  color: white;
}

@media (max-width:40.625em) {
  .c17 {
    -webkit-flex-direction: column;
    -ms-flex-direction: column;
    flex-direction: column;
  }
}

@media (max-width:40.625em) {
  .c18 {
    -webkit-flex-basis: auto;
    -ms-flex-basis: auto;
    flex-basis: auto;
    width: 100%;
    max-width: 100%;
    height: auto;
  }
}

@media (max-width:40.625em) {
  .c19 {
    -webkit-flex-basis: auto;
    -ms-flex-basis: auto;
    flex-basis: auto;
    width: 100%;
    max-width: 100%;
    height: auto;
  }
}

@media (max-width:62.5em) {
  .c0 {
    padding: 3.888888888888889rem 1.1111111111111112rem 1.6666666666666667rem 1.1111111111111112rem;
  }
}

@media (max-width:62.5em) {
  .c6 {
    top: -5rem;
  }
}

@media (max-width:62.5em) {
  .c4 {
    margin-left: 0;
  }

  .c4 .c7 {
    display: inline-block;
  }
}

<HomepageGettingStarted>
  <I18n
    ns="home"
  >
    <styled.div>
      <div
        className="c0"
      >
        <styled.div>
          <div
            className="c1"
          >
            <a
              href="https://github.com/styled-components/styled-components"
            >
              <styled.img
                alt="Stars on GitHub"
                src="https://img.shields.io/github/stars/styled-components/styled-components.svg?style=social&label=Star&maxAge=3600"
              >
                <img
                  alt="Stars on GitHub"
                  className="c2"
                  src="https://img.shields.io/github/stars/styled-components/styled-components.svg?style=social&label=Star&maxAge=3600"
                />
              </styled.img>
            </a>
            <a
              href="https://www.npmjs.com/package/styled-components"
            >
              <styled.img
                alt="Current Version"
                src="https://img.shields.io/npm/v/styled-components.svg"
              >
                <img
                  alt="Current Version"
                  className="c2"
                  src="https://img.shields.io/npm/v/styled-components.svg"
                />
              </styled.img>
            </a>
            <styled.img
              alt="Monthly downloads"
              src="https://img.shields.io/npm/dm/styled-components.svg?maxAge=3600"
            >
              <img
                alt="Monthly downloads"
                className="c2"
                src="https://img.shields.io/npm/dm/styled-components.svg?maxAge=3600"
              />
            </styled.img>
            <styled.img
              alt="Gzipped size"
              src="http://img.badgesize.io/https://unpkg.com/styled-components/dist/styled-components.min.js?compression=gzip&label=gzip%20size"
            >
              <img
                alt="Gzipped size"
                className="c2"
                src="http://img.badgesize.io/https://unpkg.com/styled-components/dist/styled-components.min.js?compression=gzip&label=gzip%20size"
              />
            </styled.img>
            <a
              href="https://spectrum.chat/styled-components"
            >
              <styled.img
                alt="Join the community on Spectrum"
                src="https://withspectrum.github.io/badge/badge.svg"
              >
                <img
                  alt="Join the community on Spectrum"
                  className="c2"
                  src="https://withspectrum.github.io/badge/badge.svg"
                />
              </styled.img>
            </a>
          </div>
        </styled.div>
        <div>
          <Heading
            level={1}
            literal={null}
            nodeKey="1:1-1:171"
          >
            <styled.h1>
              <h1
                className="c3"
              >
                Getting started
              </h1>
            </styled.h1>
          </Heading>
          <Heading
            level={2}
            literal={null}
            nodeKey="2:1-2:151"
          >
            <Link
              id="installation"
              sub={false}
            >
              <Styled(styled.h2)>
                <styled.h2
                  className="c4"
                >
                  <h2
                    className="c4 c5"
                  >
                    <styled.div
                      id="installation"
                    >
                      <div
                        aria-hidden={true}
                        className="c6"
                        id="installation"
                      />
                    </styled.div>
                    <styled.a
                      href="#installation"
                    >
                      <a
                        className="c7 c8"
                        href="#installation"
                      >
                        <Styled(LinkIcon)>
                          <LinkIcon
                            className="c9"
                            height={null}
                            width={null}
                          >
                            <svg
                              className="octicons octicons-link-icon c9"
                              height={null}
                              viewBox="0 0 16 16"
                              width={null}
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
                                fillRule="evenodd"
                              />
                            </svg>
                          </LinkIcon>
                        </Styled(LinkIcon)>
                      </a>
                    </styled.a>
                    Installation
                  </h2>
                </styled.h2>
              </Styled(styled.h2)>
            </Link>
          </Heading>
          <Paragraph
            literal={null}
            nodeKey="4:1-5:989"
          >
            <p>
              To download styled-components run 
              <Code
                inline={true}
                literal="npm install --save styled-components"
                nodeKey="4:1-5:981"
              >
                <styled.span>
                  <span
                    className="c10"
                  >
                    npm install --save styled-components
                  </span>
                </styled.span>
              </Code>
              .
              That's all you need to do, you are now ready to use it in your app! (yep, no build step needed 👌)
            </p>
          </Paragraph>
          <Heading
            level={2}
            literal={null}
            nodeKey="7:1-7:301"
          >
            <Link
              id="your-first-styled-component"
              sub={false}
            >
              <Styled(styled.h2)>
                <styled.h2
                  className="c4"
                >
                  <h2
                    className="c4 c5"
                  >
                    <styled.div
                      id="your-first-styled-component"
                    >
                      <div
                        aria-hidden={true}
                        className="c6"
                        id="your-first-styled-component"
                      />
                    </styled.div>
                    <styled.a
                      href="#your-first-styled-component"
                    >
                      <a
                        className="c7 c8"
                        href="#your-first-styled-component"
                      >
                        <Styled(LinkIcon)>
                          <LinkIcon
                            className="c9"
                            height={null}
                            width={null}
                          >
                            <svg
                              className="octicons octicons-link-icon c9"
                              height={null}
                              viewBox="0 0 16 16"
                              width={null}
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
                                fillRule="evenodd"
                              />
                            </svg>
                          </LinkIcon>
                        </Styled(LinkIcon)>
                      </a>
                    </styled.a>
                    Your first styled component
                  </h2>
                </styled.h2>
              </Styled(styled.h2)>
            </Link>
          </Heading>
          <Paragraph
            literal={null}
            nodeKey="9:1-11:8813"
          >
            <p>
              Let's say you want to create a simple and reusable 
              <Code
                inline={true}
                literal="<Button />"
                nodeKey="9:1-11:883"
              >
                <styled.span>
                  <span
                    className="c10"
                  >
                    &lt;Button /&gt;
                  </span>
                </styled.span>
              </Code>
               component that you can use throughout your application.
              There should be a normal version and a big and 
              <Code
                inline={true}
                literal="primary"
                nodeKey="9:1-11:887"
              >
                <styled.span>
                  <span
                    className="c10"
                  >
                    primary
                  </span>
                </styled.span>
              </Code>
               version for the important buttons.
              This is what it should look like when rendered: (this is a live example, click on them!)
            </p>
          </Paragraph>
        </div>
        <styled.div>
          <div
            className="c1"
          >
            <styled.button
              onClick={[Function]}
            >
              <button
                className="c11"
                onClick={[Function]}
              >
                Normal button
              </button>
            </styled.button>
            <styled.button
              onClick={[Function]}
              primary={true}
            >
              <button
                className="c12"
                onClick={[Function]}
              >
                Primary button
              </button>
            </styled.button>
          </div>
        </styled.div>
        <div>
          <Paragraph
            literal={null}
            nodeKey="1:1-1:675"
          >
            <p>
              First, let's import styled-components and create a 
              <Code
                inline={true}
                literal="styled.button"
                nodeKey="1:1-1:673"
              >
                <styled.span>
                  <span
                    className="c10"
                  >
                    styled.button
                  </span>
                </styled.span>
              </Code>
              :
            </p>
          </Paragraph>
          <CodeBlock
            codeinfo={
              Array [
                "jsx",
              ]
            }
            language="jsx"
            literal="import styled from 'styled-components';
          
          const Button = styled.button\`\`;
          "
            nodeKey="3:1-7:31"
          >
            <CodeBlock
              code="import styled from 'styled-components';
            
            const Button = styled.button\`\`;
            "
              language="jsx"
            >
              <styled.pre
                dangerouslySetInnerHTML={
                  Object {
                    "__html": "<span class=\\"token keyword\\">import</span> styled <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'styled-components'</span><span class=\\"token punctuation\\">;</span>
                  
                  <span class=\\"token keyword\\">const</span> Button <span class=\\"token operator\\">=</span> styled<span class=\\"token punctuation\\">.</span>button<span class=\\"token styled-template-string\\"><span class=\\"token string language-css\\">\`\`</span></span><span class=\\"token punctuation\\">;</span>
                  ",
                  }
                }
              >
                <pre
                  className="prism-code c13"
                  dangerouslySetInnerHTML={
                    Object {
                      "__html": "<span class=\\"token keyword\\">import</span> styled <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'styled-components'</span><span class=\\"token punctuation\\">;</span>
                    
                    <span class=\\"token keyword\\">const</span> Button <span class=\\"token operator\\">=</span> styled<span class=\\"token punctuation\\">.</span>button<span class=\\"token styled-template-string\\"><span class=\\"token string language-css\\">\`\`</span></span><span class=\\"token punctuation\\">;</span>
                    ",
                    }
                  }
                />
              </styled.pre>
            </CodeBlock>
          </CodeBlock>
          <Paragraph
            literal={null}
            nodeKey="9:1-12:9216"
          >
            <p>
              This 
              <Code
                inline={true}
                literal="Button"
                nodeKey="9:1-12:921"
              >
                <styled.span>
                  <span
                    className="c10"
                  >
                    Button
                  </span>
                </styled.span>
              </Code>
               variable here is now a React component that you can use like any other React component!
              This unusual backtick syntax is a new JavaScript feature called a tagged template literal.
              You know how you can call functions with parenthesis? (
              <Code
                inline={true}
                literal="myFunc()"
                nodeKey="9:1-12:928"
              >
                <styled.span>
                  <span
                    className="c10"
                  >
                    myFunc()
                  </span>
                </styled.span>
              </Code>
              ) Well, now you can also call functions with backticks!
              
              <Link
                href="/docs/advanced#tagged-template-literals"
                literal={null}
                nodeKey="9:1-12:9214"
              >
                <Link
                  href="/docs/advanced#tagged-template-literals"
                  inline={true}
                >
                  <Link
                    href="/docs/advanced#tagged-template-literals"
                  >
                    <styled.a
                      href="/docs/advanced#tagged-template-literals"
                      onClick={[Function]}
                    >
                      <a
                        className="c14"
                        href="/docs/advanced#tagged-template-literals"
                        onClick={[Function]}
                        rel="noopener"
                        target="_blank"
                      >
                        here is an explanation
                      </a>
                    </styled.a>
                  </Link>
                </Link>
              </Link>
               of how that works exactly.
            </p>
          </Paragraph>
          <Paragraph
            literal={null}
            nodeKey="14:1-14:1063"
          >
            <p>
              If you render our lovely component now (just like any other component: 
              <Code
                inline={true}
                literal="<Button />"
                nodeKey="14:1-14:1061"
              >
                <styled.span>
                  <span
                    className="c10"
                  >
                    &lt;Button /&gt;
                  </span>
                </styled.span>
              </Code>
              ) this is what you get:
            </p>
          </Paragraph>
        </div>
        <styled.div>
          <div
            className="c1"
          >
            <button>
              I'm a &lt;Button /&gt;!
            </button>
          </div>
        </styled.div>
        <div>
          <Paragraph
            literal={null}
            nodeKey="1:1-2:7110"
          >
            <p>
              It renders a button! That's not a very nice button though 😕 we can do better than this,
              let's give it a bit of styling and tickle out the hidden beauty within!
            </p>
          </Paragraph>
          <CodeBlock
            codeinfo={
              Array [
                "jsx",
              ]
            }
            language="jsx"
            literal="const Button = styled.button\`
            border-radius: 3px;
            padding: 0.25em 1em;
            margin: 0 1em;
            background: transparent;
            color: palevioletred;
            border: 2px solid palevioletred;
          \`;
          "
            nodeKey="4:1-13:2"
          >
            <CodeBlock
              code="const Button = styled.button\`
              border-radius: 3px;
              padding: 0.25em 1em;
              margin: 0 1em;
              background: transparent;
              color: palevioletred;
              border: 2px solid palevioletred;
            \`;
            "
              language="jsx"
            >
              <styled.pre
                dangerouslySetInnerHTML={
                  Object {
                    "__html": "<span class=\\"token keyword\\">const</span> Button <span class=\\"token operator\\">=</span> styled<span class=\\"token punctuation\\">.</span>button<span class=\\"token styled-template-string\\"><span class=\\"token string language-css\\">\`
                    <span class=\\"token property\\">border-radius</span><span class=\\"token punctuation\\">:</span> 3px</span>;<span class=\\"token string language-css\\">
                    <span class=\\"token property\\">padding</span><span class=\\"token punctuation\\">:</span> 0.25em 1em</span>;<span class=\\"token string language-css\\">
                    <span class=\\"token property\\">margin</span><span class=\\"token punctuation\\">:</span> 0 1em</span>;<span class=\\"token string language-css\\">
                    <span class=\\"token property\\">background</span><span class=\\"token punctuation\\">:</span> transparent</span>;<span class=\\"token string language-css\\">
                    <span class=\\"token property\\">color</span><span class=\\"token punctuation\\">:</span> palevioletred</span>;<span class=\\"token string language-css\\">
                    <span class=\\"token property\\">border</span><span class=\\"token punctuation\\">:</span> 2px solid palevioletred</span>;<span class=\\"token string language-css\\">
                  \`</span></span><span class=\\"token punctuation\\">;</span>
                  ",
                  }
                }
              >
                <pre
                  className="prism-code c13"
                  dangerouslySetInnerHTML={
                    Object {
                      "__html": "<span class=\\"token keyword\\">const</span> Button <span class=\\"token operator\\">=</span> styled<span class=\\"token punctuation\\">.</span>button<span class=\\"token styled-template-string\\"><span class=\\"token string language-css\\">\`
                      <span class=\\"token property\\">border-radius</span><span class=\\"token punctuation\\">:</span> 3px</span>;<span class=\\"token string language-css\\">
                      <span class=\\"token property\\">padding</span><span class=\\"token punctuation\\">:</span> 0.25em 1em</span>;<span class=\\"token string language-css\\">
                      <span class=\\"token property\\">margin</span><span class=\\"token punctuation\\">:</span> 0 1em</span>;<span class=\\"token string language-css\\">
                      <span class=\\"token property\\">background</span><span class=\\"token punctuation\\">:</span> transparent</span>;<span class=\\"token string language-css\\">
                      <span class=\\"token property\\">color</span><span class=\\"token punctuation\\">:</span> palevioletred</span>;<span class=\\"token string language-css\\">
                      <span class=\\"token property\\">border</span><span class=\\"token punctuation\\">:</span> 2px solid palevioletred</span>;<span class=\\"token string language-css\\">
                    \`</span></span><span class=\\"token punctuation\\">;</span>
                    ",
                    }
                  }
                />
              </styled.pre>
            </CodeBlock>
          </CodeBlock>
        </div>
        <styled.div>
          <div
            className="c1"
          >
            <styled.button>
              <button
                className="c15"
              >
                I'm a styled &lt;Button /&gt;
              </button>
            </styled.button>
          </div>
        </styled.div>
        <div>
          <Paragraph
            literal={null}
            nodeKey="1:1-4:8511"
          >
            <p>
              As you can see, styled-components lets you write actual CSS in your JavaScript. This means you can use all
              the features of CSS you use and love, including (but by far not limited to) media queries, all
              pseudo-selectors, nesting, etc. It also binds styles to components, which has some interesting properties.
              (learn more about 
              <Link
                href="/docs/basics#motivation"
                literal={null}
                nodeKey="1:1-4:859"
              >
                <Link
                  href="/docs/basics#motivation"
                  inline={true}
                >
                  <Link
                    href="/docs/basics#motivation"
                  >
                    <styled.a
                      href="/docs/basics#motivation"
                      onClick={[Function]}
                    >
                      <a
                        className="c14"
                        href="/docs/basics#motivation"
                        onClick={[Function]}
                        rel="noopener"
                        target="_blank"
                      >
                        the ideas behind styled-components here
                      </a>
                    </styled.a>
                  </Link>
                </Link>
              </Link>
              )
            </p>
          </Paragraph>
          <Paragraph
            literal={null}
            nodeKey="6:1-7:1607"
          >
            <p>
              The last step is that we need to define what a primary button looks like.
              To do that we also import 
              <Code
                inline={true}
                literal="{ css }"
                nodeKey="6:1-7:1603"
              >
                <styled.span>
                  <span
                    className="c10"
                  >
                    { css }
                  </span>
                </styled.span>
              </Code>
               from 
              <Code
                inline={true}
                literal="styled-components"
                nodeKey="6:1-7:1605"
              >
                <styled.span>
                  <span
                    className="c10"
                  >
                    styled-components
                  </span>
                </styled.span>
              </Code>
               and interpolate a function into our template literal, which gets passed the props of our component:
            </p>
          </Paragraph>
          <CodeBlock
            codeinfo={
              Array [
                "jsx",
              ]
            }
            language="jsx"
            literal="import styled, { css } from styled-components
          
          const Button = styled.button\`
            border-radius: 3px;
            padding: 0.25em 1em;
            margin: 0 1em;
            background: transparent;
            color: palevioletred;
            border: 2px solid palevioletred;
          
            \${props => props.primary && css\`
              background: palevioletred;
              color: white;
            \`}
          \`;
          "
            nodeKey="9:1-25:2"
          >
            <CodeBlock
              code="import styled, { css } from styled-components
            
            const Button = styled.button\`
              border-radius: 3px;
              padding: 0.25em 1em;
              margin: 0 1em;
              background: transparent;
              color: palevioletred;
              border: 2px solid palevioletred;
            
              \${props => props.primary && css\`
                background: palevioletred;
                color: white;
              \`}
            \`;
            "
              language="jsx"
            >
              <styled.pre
                dangerouslySetInnerHTML={
                  Object {
                    "__html": "<span class=\\"token keyword\\">import</span> styled<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span> css <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> styled<span class=\\"token operator\\">-</span>components
                  
                  <span class=\\"token keyword\\">const</span> Button <span class=\\"token operator\\">=</span> styled<span class=\\"token punctuation\\">.</span>button<span class=\\"token styled-template-string\\"><span class=\\"token string language-css\\">\`
                    <span class=\\"token property\\">border-radius</span><span class=\\"token punctuation\\">:</span> 3px</span>;<span class=\\"token string language-css\\">
                    <span class=\\"token property\\">padding</span><span class=\\"token punctuation\\">:</span> 0.25em 1em</span>;<span class=\\"token string language-css\\">
                    <span class=\\"token property\\">margin</span><span class=\\"token punctuation\\">:</span> 0 1em</span>;<span class=\\"token string language-css\\">
                    <span class=\\"token property\\">background</span><span class=\\"token punctuation\\">:</span> transparent</span>;<span class=\\"token string language-css\\">
                    <span class=\\"token property\\">color</span><span class=\\"token punctuation\\">:</span> palevioletred</span>;<span class=\\"token string language-css\\">
                    <span class=\\"token property\\">border</span><span class=\\"token punctuation\\">:</span> 2px solid palevioletred</span>;<span class=\\"token string language-css\\">
                  
                    </span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">\${</span>props <span class=\\"token operator\\">=</span><span class=\\"token operator\\">></span> props<span class=\\"token punctuation\\">.</span>primary <span class=\\"token operator\\">&amp;&amp;</span> css<span class=\\"token template-string\\"><span class=\\"token string\\">\`
                      background: palevioletred;
                      color: white;
                    \`</span></span><span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string language-css\\">
                  \`</span></span><span class=\\"token punctuation\\">;</span>
                  ",
                  }
                }
              >
                <pre
                  className="prism-code c13"
                  dangerouslySetInnerHTML={
                    Object {
                      "__html": "<span class=\\"token keyword\\">import</span> styled<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span> css <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> styled<span class=\\"token operator\\">-</span>components
                    
                    <span class=\\"token keyword\\">const</span> Button <span class=\\"token operator\\">=</span> styled<span class=\\"token punctuation\\">.</span>button<span class=\\"token styled-template-string\\"><span class=\\"token string language-css\\">\`
                      <span class=\\"token property\\">border-radius</span><span class=\\"token punctuation\\">:</span> 3px</span>;<span class=\\"token string language-css\\">
                      <span class=\\"token property\\">padding</span><span class=\\"token punctuation\\">:</span> 0.25em 1em</span>;<span class=\\"token string language-css\\">
                      <span class=\\"token property\\">margin</span><span class=\\"token punctuation\\">:</span> 0 1em</span>;<span class=\\"token string language-css\\">
                      <span class=\\"token property\\">background</span><span class=\\"token punctuation\\">:</span> transparent</span>;<span class=\\"token string language-css\\">
                      <span class=\\"token property\\">color</span><span class=\\"token punctuation\\">:</span> palevioletred</span>;<span class=\\"token string language-css\\">
                      <span class=\\"token property\\">border</span><span class=\\"token punctuation\\">:</span> 2px solid palevioletred</span>;<span class=\\"token string language-css\\">
                    
                      </span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">\${</span>props <span class=\\"token operator\\">=</span><span class=\\"token operator\\">></span> props<span class=\\"token punctuation\\">.</span>primary <span class=\\"token operator\\">&amp;&amp;</span> css<span class=\\"token template-string\\"><span class=\\"token string\\">\`
                        background: palevioletred;
                        color: white;
                      \`</span></span><span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string language-css\\">
                    \`</span></span><span class=\\"token punctuation\\">;</span>
                    ",
                    }
                  }
                />
              </styled.pre>
            </CodeBlock>
          </CodeBlock>
          <Paragraph
            literal={null}
            nodeKey="27:1-28:459"
          >
            <p>
              All we're saying here is that when the 
              <Code
                inline={true}
                literal="primary"
                nodeKey="27:1-28:453"
              >
                <styled.span>
                  <span
                    className="c10"
                  >
                    primary
                  </span>
                </styled.span>
              </Code>
               property is set we want to add some more 
              <Code
                inline={true}
                literal="css"
                nodeKey="27:1-28:455"
              >
                <styled.span>
                  <span
                    className="c10"
                  >
                    css
                  </span>
                </styled.span>
              </Code>
               to our component,
              in this case change the background and color.
            </p>
          </Paragraph>
          <Paragraph
            literal={null}
            nodeKey="30:1-30:627"
          >
            <p>
              That's all, we're done! Take a look at our finished component:
            </p>
          </Paragraph>
          <CodeBlock
            codeinfo={
              Array [
                "react",
              ]
            }
            language="react"
            literal="const Button = styled.button\`
            border-radius: 3px;
            padding: 0.25em 1em;
            margin: 0 1em;
            background: transparent;
            color: palevioletred;
            border: 2px solid palevioletred;
          
            \${props => props.primary && css\`
              background: palevioletred;
              color: white;
            \`}
          \`;
          
          render(
            <div>
              <Button>Normal Button</Button>
              <Button primary>Primary Button</Button>
            </div>
          );
          "
            nodeKey="32:1-53:2"
          >
            <LiveEdit
              code="const Button = styled.button\`
              border-radius: 3px;
              padding: 0.25em 1em;
              margin: 0 1em;
              background: transparent;
              color: palevioletred;
              border: 2px solid palevioletred;
            
              \${props => props.primary && css\`
                background: palevioletred;
                color: white;
              \`}
            \`;
            
            render(
              <div>
                <Button>Normal Button</Button>
                <Button primary>Primary Button</Button>
              </div>
            );
            "
              noInline={true}
            >
              <Styled(LiveProvider)
                code="const Button = styled.button\`
                border-radius: 3px;
                padding: 0.25em 1em;
                margin: 0 1em;
                background: transparent;
                color: palevioletred;
                border: 2px solid palevioletred;
              
                \${props => props.primary && css\`
                  background: palevioletred;
                  color: white;
                \`}
              \`;
              
              render(
                <div>
                  <Button>Normal Button</Button>
                  <Button primary>Primary Button</Button>
                </div>
              );
              "
                mountStylesheet={false}
                noInline={true}
                scope={
                  Object {
                    "ThemeProvider": [Function],
                    "css": [Function],
                    "keyframes": [Function],
                    "styled": [Function],
                    "withTheme": [Function],
                  }
                }
              >
                <LiveProvider
                  className="c16"
                  code="const Button = styled.button\`
                  border-radius: 3px;
                  padding: 0.25em 1em;
                  margin: 0 1em;
                  background: transparent;
                  color: palevioletred;
                  border: 2px solid palevioletred;
                
                  \${props => props.primary && css\`
                    background: palevioletred;
                    color: white;
                  \`}
                \`;
                
                render(
                  <div>
                    <Button>Normal Button</Button>
                    <Button primary>Primary Button</Button>
                  </div>
                );
                "
                  mountStylesheet={false}
                  noInline={true}
                  scope={
                    Object {
                      "ThemeProvider": [Function],
                      "css": [Function],
                      "keyframes": [Function],
                      "styled": [Function],
                      "withTheme": [Function],
                    }
                  }
                >
                  <div
                    className="react-live c16"
                    scope={
                      Object {
                        "ThemeProvider": [Function],
                        "css": [Function],
                        "keyframes": [Function],
                        "styled": [Function],
                        "withTheme": [Function],
                      }
                    }
                  >
                    <styled.div>
                      <div
                        className="c17"
                      >
                        <Styled(LiveEditor)>
                          <Styled(LiveEditor)>
                            <LiveEditor
                              className="c18"
                            >
                              <Editor
                                className="c18"
                                code="const Button = styled.button\`
                                border-radius: 3px;
                                padding: 0.25em 1em;
                                margin: 0 1em;
                                background: transparent;
                                color: palevioletred;
                                border: 2px solid palevioletred;
                              
                                \${props => props.primary && css\`
                                  background: palevioletred;
                                  color: white;
                                \`}
                              \`;
                              
                              render(
                                <div>
                                  <Button>Normal Button</Button>
                                  <Button primary>Primary Button</Button>
                                </div>
                              );
                              "
                                contentEditable={true}
                                onChange={[Function]}
                              >
                                <pre
                                  className="prism-code c18"
                                  contentEditable={true}
                                  dangerouslySetInnerHTML={
                                    Object {
                                      "__html": "<span class=\\"token keyword\\">const</span> Button <span class=\\"token operator\\">=</span> styled<span class=\\"token punctuation\\">.</span>button<span class=\\"token styled-template-string\\"><span class=\\"token string language-css\\">\`
                                    	<span class=\\"token property\\">border-radius</span><span class=\\"token punctuation\\">:</span> 3px</span>;<span class=\\"token string language-css\\">
                                    	<span class=\\"token property\\">padding</span><span class=\\"token punctuation\\">:</span> 0.25em 1em</span>;<span class=\\"token string language-css\\">
                                    	<span class=\\"token property\\">margin</span><span class=\\"token punctuation\\">:</span> 0 1em</span>;<span class=\\"token string language-css\\">
                                    	<span class=\\"token property\\">background</span><span class=\\"token punctuation\\">:</span> transparent</span>;<span class=\\"token string language-css\\">
                                    	<span class=\\"token property\\">color</span><span class=\\"token punctuation\\">:</span> palevioletred</span>;<span class=\\"token string language-css\\">
                                    	<span class=\\"token property\\">border</span><span class=\\"token punctuation\\">:</span> 2px solid palevioletred</span>;<span class=\\"token string language-css\\">
                                    
                                    	</span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">\${</span>props <span class=\\"token operator\\">=</span><span class=\\"token operator\\">></span> props<span class=\\"token punctuation\\">.</span>primary <span class=\\"token operator\\">&amp;&amp;</span> css<span class=\\"token template-string\\"><span class=\\"token string\\">\`
                                    		background: palevioletred;
                                    		color: white;
                                    	\`</span></span><span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string language-css\\">
                                    \`</span></span><span class=\\"token punctuation\\">;</span>
                                    
                                    <span class=\\"token function\\">render</span><span class=\\"token punctuation\\">(</span>
                                    	<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span><span class=\\"token punctuation\\">></span></span>
                                    		<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>Button</span><span class=\\"token punctuation\\">></span></span>Normal Button<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>Button</span><span class=\\"token punctuation\\">></span></span>
                                    		<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>Button</span> <span class=\\"token attr-name\\">primary</span><span class=\\"token punctuation\\">></span></span>Primary Button<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>Button</span><span class=\\"token punctuation\\">></span></span>
                                    	<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">></span></span>
                                    <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>
                                    ",
                                    }
                                  }
                                  onChange={[Function]}
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                />
                              </Editor>
                            </LiveEditor>
                          </Styled(LiveEditor)>
                        </Styled(LiveEditor)>
                        <Styled(LivePreview)>
                          <LivePreview
                            className="c19"
                          >
                            <div
                              className="react-live-preview c19"
                            >
                              <div>
                                <styled.button>
                                  <button
                                    className="c20"
                                  >
                                    Normal Button
                                  </button>
                                </styled.button>
                                <styled.button
                                  primary={true}
                                >
                                  <button
                                    className="c21"
                                  >
                                    Primary Button
                                  </button>
                                </styled.button>
                              </div>
                            </div>
                          </LivePreview>
                        </Styled(LivePreview)>
                      </div>
                    </styled.div>
                    <Styled(LiveError)>
                      <LiveError
                        className="c22"
                      />
                    </Styled(LiveError)>
                  </div>
                </LiveProvider>
              </Styled(LiveProvider)>
            </LiveEdit>
          </CodeBlock>
          <Paragraph
            literal={null}
            nodeKey="55:1-55:1366"
          >
            <p>
              Nice 😍 That's a live updating editor too, so play around with it a bit to get a feel for what it's like to work with styled-components!
            </p>
          </Paragraph>
          <Paragraph
            literal={null}
            nodeKey="57:1-57:14113"
          >
            <p>
              Once you're done take a look at the 
              <Link
                href="/docs"
                literal={null}
                nodeKey="57:1-57:1415"
              >
                <Link
                  href="/docs"
                  inline={true}
                >
                  <Link
                    href="/docs"
                  >
                    <styled.a
                      href="/docs"
                      onClick={[Function]}
                    >
                      <a
                        className="c14"
                        href="/docs"
                        onClick={[Function]}
                        rel="noopener"
                        target="_blank"
                      >
                        documentation
                      </a>
                    </styled.a>
                  </Link>
                </Link>
              </Link>
              , specifically the 
              <Link
                href="/docs/basics#getting-started"
                literal={null}
                nodeKey="57:1-57:1419"
              >
                <Link
                  href="/docs/basics#getting-started"
                  inline={true}
                >
                  <Link
                    href="/docs/basics#getting-started"
                  >
                    <styled.a
                      href="/docs/basics#getting-started"
                      onClick={[Function]}
                    >
                      <a
                        className="c14"
                        href="/docs/basics#getting-started"
                        onClick={[Function]}
                        rel="noopener"
                        target="_blank"
                      >
                        Getting started
                      </a>
                    </styled.a>
                  </Link>
                </Link>
              </Link>
               section! Enjoy ✨
            </p>
          </Paragraph>
        </div>
      </div>
    </styled.div>
  </I18n>
</HomepageGettingStarted>
`;

exports[`HomepageGettingStarted renders in spanish 1`] = `
.c10 {
  display: inline-block;
  font-family: "Operator Mono SSm A","Operator Mono SSm B",monospace;
  font-size: 90%;
  font-weight: 300;
  padding: 0 0.05em 0.1em;
  vertical-align: bottom;
  line-height: 1.4;
}

.c16 {
  box-shadow: 0.05555555555555555rem 0.05555555555555555rem 1.1111111111111112rem rgba(20,20,20,0.27);
  overflow: hidden;
  margin: 1.9444444444444444rem 0;
  text-align: left;
}

.c17 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: stretch;
  -webkit-justify-content: stretch;
  -ms-flex-pack: stretch;
  justify-content: stretch;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
}

.c18 {
  background: #1d1f27;
  font-size: 0.8rem;
  font-family: "Operator Mono SSm A","Operator Mono SSm B",monospace;
  font-weight: 300;
  height: 22.22222222222222rem;
  overflow-y: scroll;
  overflow-x: hidden;
  cursor: text;
  white-space: pre-wrap;
  -webkit-flex-basis: 50%;
  -ms-flex-basis: 50%;
  flex-basis: 50%;
  width: 50%;
  max-width: 50%;
}

.c19 {
  position: relative;
  padding: 0.5rem;
  background: white;
  color: black;
  height: auto;
  overflow: hidden;
  -webkit-flex-basis: 50%;
  -ms-flex-basis: 50%;
  flex-basis: 50%;
  width: 50%;
  max-width: 50%;
}

.c22 {
  display: block;
  width: 100%;
  padding: 0.4444444444444444rem;
  background: #ff5555;
  color: white;
  font-size: 0.8rem;
  font-family: "Avenir Next",-apple-system,BlinkMacSystemFont,"Segoe UI",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  white-space: pre;
}

.c13 {
  background: #1d1f27;
  font-size: 0.8rem;
  font-family: "Operator Mono SSm A","Operator Mono SSm B",monospace;
  font-weight: 300;
  white-space: pre-wrap;
  border-radius: 0.16666666666666666rem;
  box-shadow: 1px 1px 20px rgba(20,20,20,0.27);
  margin: 1.9444444444444444rem 0;
  overflow-x: hidden;
}

.c14 {
  color: rgb(219,112,147);
  text-decoration: underline;
  font-weight: 600;
  cursor: pointer;
}

.c0 {
  width: 56.888888888888886rem;
  max-width: 100%;
  margin: 0 auto;
  padding: 5rem 2.2222222222222223rem 1.6666666666666667rem 2.2222222222222223rem;
  box-sizing: border-box;
  font-family: -apple-system,BlinkMacSystemFont,"Segoe UI",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  -webkit-transition: -webkit-transform 150ms ease-out;
  -webkit-transition: transform 150ms ease-out;
  transition: transform 150ms ease-out;
}

.c3 {
  display: block;
  text-align: left;
  width: 100%;
  color: rgb(243,182,97);
  font-size: 2.3333333333333335rem;
  font-weight: bold;
  font-family: "Avenir Next",-apple-system,BlinkMacSystemFont,"Segoe UI",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
}

.c5 {
  font-size: 1.7777777777777777rem;
  font-weight: 500;
  font-family: "Avenir Next",-apple-system,BlinkMacSystemFont,"Segoe UI",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
}

.c6 {
  position: relative;
  display: block;
  visibility: hidden;
  height: 0;
  top: -3.888888888888889rem;
}

.c8 {
  display: none;
  position: absolute;
  left: 0;
  color: inherit;
}

.c9 {
  width: 1.1111111111111112rem;
  opacity: 0.7;
  margin-top: -0.2777777777777778rem;
}

.c9:hover {
  opacity: 0.9;
}

.c4 {
  position: relative;
  margin-left: -1.6666666666666667rem;
  padding-left: 1.6666666666666667rem;
}

.c4:hover .c7 {
  display: inline-block;
}

.c1 {
  text-align: center;
}

.c2 {
  margin: 0 0.5em 3em;
  height: 1.5em;
}

.c11 {
  border-radius: 3px;
  padding: 0.25em 1em;
  margin: 0 1em;
  background: transparent;
  color: palevioletred;
  border: 2px solid palevioletred;
}

.c12 {
  border-radius: 3px;
  padding: 0.25em 1em;
  margin: 0 1em;
  background: transparent;
  color: palevioletred;
  border: 2px solid palevioletred;
  background: palevioletred;
  color: white;
}

.c15 {
  border-radius: 3px;
  padding: 0.25em 1em;
  background: transparent;
  color: palevioletred;
  border: 2px solid palevioletred;
}

.c20 {
  border-radius: 3px;
  padding: 0.25em 1em;
  margin: 0 1em;
  background: transparent;
  color: palevioletred;
  border: 2px solid palevioletred;
}

.c21 {
  border-radius: 3px;
  padding: 0.25em 1em;
  margin: 0 1em;
  background: transparent;
  color: palevioletred;
  border: 2px solid palevioletred;
  background: palevioletred;
  color: white;
}

@media (max-width:40.625em) {
  .c17 {
    -webkit-flex-direction: column;
    -ms-flex-direction: column;
    flex-direction: column;
  }
}

@media (max-width:40.625em) {
  .c18 {
    -webkit-flex-basis: auto;
    -ms-flex-basis: auto;
    flex-basis: auto;
    width: 100%;
    max-width: 100%;
    height: auto;
  }
}

@media (max-width:40.625em) {
  .c19 {
    -webkit-flex-basis: auto;
    -ms-flex-basis: auto;
    flex-basis: auto;
    width: 100%;
    max-width: 100%;
    height: auto;
  }
}

@media (max-width:62.5em) {
  .c0 {
    padding: 3.888888888888889rem 1.1111111111111112rem 1.6666666666666667rem 1.1111111111111112rem;
  }
}

@media (max-width:62.5em) {
  .c6 {
    top: -5rem;
  }
}

@media (max-width:62.5em) {
  .c4 {
    margin-left: 0;
  }

  .c4 .c7 {
    display: inline-block;
  }
}

<HomepageGettingStarted>
  <I18n
    ns="home"
  >
    <styled.div>
      <div
        className="c0"
      >
        <styled.div>
          <div
            className="c1"
          >
            <a
              href="https://github.com/styled-components/styled-components"
            >
              <styled.img
                alt="Estrellas en Github"
                src="https://img.shields.io/github/stars/styled-components/styled-components.svg?style=social&label=Star&maxAge=3600"
              >
                <img
                  alt="Estrellas en Github"
                  className="c2"
                  src="https://img.shields.io/github/stars/styled-components/styled-components.svg?style=social&label=Star&maxAge=3600"
                />
              </styled.img>
            </a>
            <a
              href="https://www.npmjs.com/package/styled-components"
            >
              <styled.img
                alt="Versión actual"
                src="https://img.shields.io/npm/v/styled-components.svg"
              >
                <img
                  alt="Versión actual"
                  className="c2"
                  src="https://img.shields.io/npm/v/styled-components.svg"
                />
              </styled.img>
            </a>
            <styled.img
              alt="Descargas mensuales"
              src="https://img.shields.io/npm/dm/styled-components.svg?maxAge=3600"
            >
              <img
                alt="Descargas mensuales"
                className="c2"
                src="https://img.shields.io/npm/dm/styled-components.svg?maxAge=3600"
              />
            </styled.img>
            <styled.img
              alt="Tamaño en gzip"
              src="http://img.badgesize.io/https://unpkg.com/styled-components/dist/styled-components.min.js?compression=gzip&label=gzip%20size"
            >
              <img
                alt="Tamaño en gzip"
                className="c2"
                src="http://img.badgesize.io/https://unpkg.com/styled-components/dist/styled-components.min.js?compression=gzip&label=gzip%20size"
              />
            </styled.img>
            <a
              href="https://spectrum.chat/styled-components"
            >
              <styled.img
                alt="Únete a la comunidad en Spectrum"
                src="https://withspectrum.github.io/badge/badge.svg"
              >
                <img
                  alt="Únete a la comunidad en Spectrum"
                  className="c2"
                  src="https://withspectrum.github.io/badge/badge.svg"
                />
              </styled.img>
            </a>
          </div>
        </styled.div>
        <div>
          <Heading
            level={1}
            literal={null}
            nodeKey="1:1-1:111"
          >
            <styled.h1>
              <h1
                className="c3"
              >
                Empezando
              </h1>
            </styled.h1>
          </Heading>
          <Heading
            level={2}
            literal={null}
            nodeKey="2:1-2:141"
          >
            <Link
              id="instalacin"
              sub={false}
            >
              <Styled(styled.h2)>
                <styled.h2
                  className="c4"
                >
                  <h2
                    className="c4 c5"
                  >
                    <styled.div
                      id="instalacin"
                    >
                      <div
                        aria-hidden={true}
                        className="c6"
                        id="instalacin"
                      />
                    </styled.div>
                    <styled.a
                      href="#instalacin"
                    >
                      <a
                        className="c7 c8"
                        href="#instalacin"
                      >
                        <Styled(LinkIcon)>
                          <LinkIcon
                            className="c9"
                            height={null}
                            width={null}
                          >
                            <svg
                              className="octicons octicons-link-icon c9"
                              height={null}
                              viewBox="0 0 16 16"
                              width={null}
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
                                fillRule="evenodd"
                              />
                            </svg>
                          </LinkIcon>
                        </Styled(LinkIcon)>
                      </a>
                    </styled.a>
                    Instalación
                  </h2>
                </styled.h2>
              </Styled(styled.h2)>
            </Link>
          </Heading>
          <Paragraph
            literal={null}
            nodeKey="4:1-5:1147"
          >
            <p>
              Para descargar styled-components ejecuta 
              <Code
                inline={true}
                literal="npm install --save styled-components"
                nodeKey="4:1-5:1141"
              >
                <styled.span>
                  <span
                    className="c10"
                  >
                    npm install --save styled-components
                  </span>
                </styled.span>
              </Code>
              .
              Eso es todo lo que necesitas hacer, ¡Ahora estás listo para usarlo en tu app! (sip, no es necesario compilarlo 👌)
            </p>
          </Paragraph>
          <Heading
            level={2}
            literal={null}
            nodeKey="7:1-7:341"
          >
            <Link
              id="tu-primer-componente-estilizado"
              sub={false}
            >
              <Styled(styled.h2)>
                <styled.h2
                  className="c4"
                >
                  <h2
                    className="c4 c5"
                  >
                    <styled.div
                      id="tu-primer-componente-estilizado"
                    >
                      <div
                        aria-hidden={true}
                        className="c6"
                        id="tu-primer-componente-estilizado"
                      />
                    </styled.div>
                    <styled.a
                      href="#tu-primer-componente-estilizado"
                    >
                      <a
                        className="c7 c8"
                        href="#tu-primer-componente-estilizado"
                      >
                        <Styled(LinkIcon)>
                          <LinkIcon
                            className="c9"
                            height={null}
                            width={null}
                          >
                            <svg
                              className="octicons octicons-link-icon c9"
                              height={null}
                              viewBox="0 0 16 16"
                              width={null}
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
                                fillRule="evenodd"
                              />
                            </svg>
                          </LinkIcon>
                        </Styled(LinkIcon)>
                      </a>
                    </styled.a>
                    Tu primer componente estilizado
                  </h2>
                </styled.h2>
              </Styled(styled.h2)>
            </Link>
          </Heading>
          <Paragraph
            literal={null}
            nodeKey="9:1-11:9711"
          >
            <p>
              Digamos que quieres crear un componente 
              <Code
                inline={true}
                literal="<Button />"
                nodeKey="9:1-11:971"
              >
                <styled.span>
                  <span
                    className="c10"
                  >
                    &lt;Button /&gt;
                  </span>
                </styled.span>
              </Code>
               simplre y reusable que puedas usar utilizar en toda tu aplicación.
              Debe de haber una versión normal y una grande y una versión 
              <Code
                inline={true}
                literal="primaria"
                nodeKey="9:1-11:975"
              >
                <styled.span>
                  <span
                    className="c10"
                  >
                    primaria
                  </span>
                </styled.span>
              </Code>
               para los botones importantes.
              Así es como debe de verse una vez renderizado: (Esto es un ejemplo en vivo, ¡Haz click en ellos!)
            </p>
          </Paragraph>
        </div>
        <styled.div>
          <div
            className="c1"
          >
            <styled.button
              onClick={[Function]}
            >
              <button
                className="c11"
                onClick={[Function]}
              >
                Botón normal
              </button>
            </styled.button>
            <styled.button
              onClick={[Function]}
              primary={true}
            >
              <button
                className="c12"
                onClick={[Function]}
              >
                Botón primario
              </button>
            </styled.button>
          </div>
        </styled.div>
        <div>
          <Paragraph
            literal={null}
            nodeKey="1:1-1:713"
          >
            <p>
              Primero, hay que importar styled-components y crear un 
              <Code
                inline={true}
                literal="styled.button"
                nodeKey="1:1-1:711"
              >
                <styled.span>
                  <span
                    className="c10"
                  >
                    styled.button
                  </span>
                </styled.span>
              </Code>
              :
            </p>
          </Paragraph>
          <CodeBlock
            codeinfo={
              Array [
                "jsx",
              ]
            }
            language="jsx"
            literal="import styled from 'styled-components';
          
          const Button = styled.button\`\`;
          "
            nodeKey="3:1-7:31"
          >
            <CodeBlock
              code="import styled from 'styled-components';
            
            const Button = styled.button\`\`;
            "
              language="jsx"
            >
              <styled.pre
                dangerouslySetInnerHTML={
                  Object {
                    "__html": "<span class=\\"token keyword\\">import</span> styled <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'styled-components'</span><span class=\\"token punctuation\\">;</span>
                  
                  <span class=\\"token keyword\\">const</span> Button <span class=\\"token operator\\">=</span> styled<span class=\\"token punctuation\\">.</span>button<span class=\\"token styled-template-string\\"><span class=\\"token string language-css\\">\`\`</span></span><span class=\\"token punctuation\\">;</span>
                  ",
                  }
                }
              >
                <pre
                  className="prism-code c13"
                  dangerouslySetInnerHTML={
                    Object {
                      "__html": "<span class=\\"token keyword\\">import</span> styled <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'styled-components'</span><span class=\\"token punctuation\\">;</span>
                    
                    <span class=\\"token keyword\\">const</span> Button <span class=\\"token operator\\">=</span> styled<span class=\\"token punctuation\\">.</span>button<span class=\\"token styled-template-string\\"><span class=\\"token string language-css\\">\`\`</span></span><span class=\\"token punctuation\\">;</span>
                    ",
                    }
                  }
                />
              </styled.pre>
            </CodeBlock>
          </CodeBlock>
          <Paragraph
            literal={null}
            nodeKey="9:1-12:9727"
          >
            <p>
              ¡Esta variable 
              <Code
                inline={true}
                literal="Button"
                nodeKey="9:1-12:971"
              >
                <styled.span>
                  <span
                    className="c10"
                  >
                    Button
                  </span>
                </styled.span>
              </Code>
               aquí ahora es un componente de React que puedes usar como cualquier otro componente de React!
              Este inusual sintaxis "backtick" es una característica nueva de JavaScript llamada una "tagged template literal".
              Sabes como ejecutar funciones con paréntesis? (
              <Code
                inline={true}
                literal="miFuncion()"
                nodeKey="9:1-12:9716"
              >
                <styled.span>
                  <span
                    className="c10"
                  >
                    miFuncion()
                  </span>
                </styled.span>
              </Code>
              ) Bueno, ¡Ahora también puedes ejecutar funciones con "backticks"!
              
              <Link
                href="/docs/advanced#tagged-template-literals"
                literal={null}
                nodeKey="9:1-12:9725"
              >
                <Link
                  href="/docs/advanced#tagged-template-literals"
                  inline={true}
                >
                  <Link
                    href="/docs/advanced#tagged-template-literals"
                  >
                    <styled.a
                      href="/docs/advanced#tagged-template-literals"
                      onClick={[Function]}
                    >
                      <a
                        className="c14"
                        href="/docs/advanced#tagged-template-literals"
                        onClick={[Function]}
                        rel="noopener"
                        target="_blank"
                      >
                        Aquí hay una explicación
                      </a>
                    </styled.a>
                  </Link>
                </Link>
              </Link>
               de como funciona exactamente.
            </p>
          </Paragraph>
          <Paragraph
            literal={null}
            nodeKey="14:1-14:1273"
          >
            <p>
              Si renderizas nuestro encantador componente ahora (Justo como cualquier otro componente: 
              <Code
                inline={true}
                literal="<Button />"
                nodeKey="14:1-14:1271"
              >
                <styled.span>
                  <span
                    className="c10"
                  >
                    &lt;Button /&gt;
                  </span>
                </styled.span>
              </Code>
              ) esto es lo que obtienes:
            </p>
          </Paragraph>
        </div>
        <styled.div>
          <div
            className="c1"
          >
            <button>
              ¡Soy un &lt;Button /&gt;!
            </button>
          </div>
        </styled.div>
        <div>
          <Paragraph
            literal={null}
            nodeKey="1:1-2:786"
          >
            <p>
              ¡Eso renderiza un botón! aunque no es muy bonito 😕 podemos hacerlo mejor,
              démosle un poco de estilo y ¡Obtengamos la belleza escondida que lleva dentro!
            </p>
          </Paragraph>
          <CodeBlock
            codeinfo={
              Array [
                "jsx",
              ]
            }
            language="jsx"
            literal="const Button = styled.button\`
            border-radius: 3px;
            padding: 0.25em 1em;
            margin: 0 1em;
            background: transparent;
            color: palevioletred;
            border: 2px solid palevioletred;
          \`;
          "
            nodeKey="4:1-13:2"
          >
            <CodeBlock
              code="const Button = styled.button\`
              border-radius: 3px;
              padding: 0.25em 1em;
              margin: 0 1em;
              background: transparent;
              color: palevioletred;
              border: 2px solid palevioletred;
            \`;
            "
              language="jsx"
            >
              <styled.pre
                dangerouslySetInnerHTML={
                  Object {
                    "__html": "<span class=\\"token keyword\\">const</span> Button <span class=\\"token operator\\">=</span> styled<span class=\\"token punctuation\\">.</span>button<span class=\\"token styled-template-string\\"><span class=\\"token string language-css\\">\`
                    <span class=\\"token property\\">border-radius</span><span class=\\"token punctuation\\">:</span> 3px</span>;<span class=\\"token string language-css\\">
                    <span class=\\"token property\\">padding</span><span class=\\"token punctuation\\">:</span> 0.25em 1em</span>;<span class=\\"token string language-css\\">
                    <span class=\\"token property\\">margin</span><span class=\\"token punctuation\\">:</span> 0 1em</span>;<span class=\\"token string language-css\\">
                    <span class=\\"token property\\">background</span><span class=\\"token punctuation\\">:</span> transparent</span>;<span class=\\"token string language-css\\">
                    <span class=\\"token property\\">color</span><span class=\\"token punctuation\\">:</span> palevioletred</span>;<span class=\\"token string language-css\\">
                    <span class=\\"token property\\">border</span><span class=\\"token punctuation\\">:</span> 2px solid palevioletred</span>;<span class=\\"token string language-css\\">
                  \`</span></span><span class=\\"token punctuation\\">;</span>
                  ",
                  }
                }
              >
                <pre
                  className="prism-code c13"
                  dangerouslySetInnerHTML={
                    Object {
                      "__html": "<span class=\\"token keyword\\">const</span> Button <span class=\\"token operator\\">=</span> styled<span class=\\"token punctuation\\">.</span>button<span class=\\"token styled-template-string\\"><span class=\\"token string language-css\\">\`
                      <span class=\\"token property\\">border-radius</span><span class=\\"token punctuation\\">:</span> 3px</span>;<span class=\\"token string language-css\\">
                      <span class=\\"token property\\">padding</span><span class=\\"token punctuation\\">:</span> 0.25em 1em</span>;<span class=\\"token string language-css\\">
                      <span class=\\"token property\\">margin</span><span class=\\"token punctuation\\">:</span> 0 1em</span>;<span class=\\"token string language-css\\">
                      <span class=\\"token property\\">background</span><span class=\\"token punctuation\\">:</span> transparent</span>;<span class=\\"token string language-css\\">
                      <span class=\\"token property\\">color</span><span class=\\"token punctuation\\">:</span> palevioletred</span>;<span class=\\"token string language-css\\">
                      <span class=\\"token property\\">border</span><span class=\\"token punctuation\\">:</span> 2px solid palevioletred</span>;<span class=\\"token string language-css\\">
                    \`</span></span><span class=\\"token punctuation\\">;</span>
                    ",
                    }
                  }
                />
              </styled.pre>
            </CodeBlock>
          </CodeBlock>
        </div>
        <styled.div>
          <div
            className="c1"
          >
            <styled.button>
              <button
                className="c15"
              >
                Soy un &lt;Button /&gt; estilizado
              </button>
            </styled.button>
          </div>
        </styled.div>
        <div>
          <Paragraph
            literal={null}
            nodeKey="1:1-4:9311"
          >
            <p>
              Como puedes ver, styled-components permite escribir CSS real en tu JavaScript. Esto significa que puedes usar todas
              las características de CSS que usas y amas, incluyendo (pero de lejos no se limita a) media queries, todos
              los pseudo-selectors, anidaciones, etc. También liga estilos a componentes, lo cual tiene propiedades interesantes.
              (aprende más acerca 
              <Link
                href="/docs/basics#motivation"
                literal={null}
                nodeKey="1:1-4:939"
              >
                <Link
                  href="/docs/basics#motivation"
                  inline={true}
                >
                  <Link
                    href="/docs/basics#motivation"
                  >
                    <styled.a
                      href="/docs/basics#motivation"
                      onClick={[Function]}
                    >
                      <a
                        className="c14"
                        href="/docs/basics#motivation"
                        onClick={[Function]}
                        rel="noopener"
                        target="_blank"
                      >
                        de las ideas detrás de styled-components aquí
                      </a>
                    </styled.a>
                  </Link>
                </Link>
              </Link>
              )
            </p>
          </Paragraph>
          <Paragraph
            literal={null}
            nodeKey="6:1-7:1867"
          >
            <p>
              El último paso es que tenemos que definir como se ve un botón primario.
              Para hacer eso importamos 
              <Code
                inline={true}
                literal="{ css }"
                nodeKey="6:1-7:1863"
              >
                <styled.span>
                  <span
                    className="c10"
                  >
                    { css }
                  </span>
                </styled.span>
              </Code>
               de 
              <Code
                inline={true}
                literal="styled-components"
                nodeKey="6:1-7:1865"
              >
                <styled.span>
                  <span
                    className="c10"
                  >
                    styled-components
                  </span>
                </styled.span>
              </Code>
               e interpolamos una función dentro de nuestra plantilla (tagged template literal), la cual pasa los props de nuestro componente:
            </p>
          </Paragraph>
          <CodeBlock
            codeinfo={
              Array [
                "jsx",
              ]
            }
            language="jsx"
            literal="import styled, { css } from styled-components
          
          const Button = styled.button\`
            border-radius: 3px;
            padding: 0.25em 1em;
            margin: 0 1em;
            background: transparent;
            color: palevioletred;
            border: 2px solid palevioletred;
          
            \${props => props.primario && css\`
              background: palevioletred;
              color: white;
            \`}
          \`;
          "
            nodeKey="9:1-25:2"
          >
            <CodeBlock
              code="import styled, { css } from styled-components
            
            const Button = styled.button\`
              border-radius: 3px;
              padding: 0.25em 1em;
              margin: 0 1em;
              background: transparent;
              color: palevioletred;
              border: 2px solid palevioletred;
            
              \${props => props.primario && css\`
                background: palevioletred;
                color: white;
              \`}
            \`;
            "
              language="jsx"
            >
              <styled.pre
                dangerouslySetInnerHTML={
                  Object {
                    "__html": "<span class=\\"token keyword\\">import</span> styled<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span> css <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> styled<span class=\\"token operator\\">-</span>components
                  
                  <span class=\\"token keyword\\">const</span> Button <span class=\\"token operator\\">=</span> styled<span class=\\"token punctuation\\">.</span>button<span class=\\"token styled-template-string\\"><span class=\\"token string language-css\\">\`
                    <span class=\\"token property\\">border-radius</span><span class=\\"token punctuation\\">:</span> 3px</span>;<span class=\\"token string language-css\\">
                    <span class=\\"token property\\">padding</span><span class=\\"token punctuation\\">:</span> 0.25em 1em</span>;<span class=\\"token string language-css\\">
                    <span class=\\"token property\\">margin</span><span class=\\"token punctuation\\">:</span> 0 1em</span>;<span class=\\"token string language-css\\">
                    <span class=\\"token property\\">background</span><span class=\\"token punctuation\\">:</span> transparent</span>;<span class=\\"token string language-css\\">
                    <span class=\\"token property\\">color</span><span class=\\"token punctuation\\">:</span> palevioletred</span>;<span class=\\"token string language-css\\">
                    <span class=\\"token property\\">border</span><span class=\\"token punctuation\\">:</span> 2px solid palevioletred</span>;<span class=\\"token string language-css\\">
                  
                    </span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">\${</span>props <span class=\\"token operator\\">=</span><span class=\\"token operator\\">></span> props<span class=\\"token punctuation\\">.</span>primario <span class=\\"token operator\\">&amp;&amp;</span> css<span class=\\"token template-string\\"><span class=\\"token string\\">\`
                      background: palevioletred;
                      color: white;
                    \`</span></span><span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string language-css\\">
                  \`</span></span><span class=\\"token punctuation\\">;</span>
                  ",
                  }
                }
              >
                <pre
                  className="prism-code c13"
                  dangerouslySetInnerHTML={
                    Object {
                      "__html": "<span class=\\"token keyword\\">import</span> styled<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span> css <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> styled<span class=\\"token operator\\">-</span>components
                    
                    <span class=\\"token keyword\\">const</span> Button <span class=\\"token operator\\">=</span> styled<span class=\\"token punctuation\\">.</span>button<span class=\\"token styled-template-string\\"><span class=\\"token string language-css\\">\`
                      <span class=\\"token property\\">border-radius</span><span class=\\"token punctuation\\">:</span> 3px</span>;<span class=\\"token string language-css\\">
                      <span class=\\"token property\\">padding</span><span class=\\"token punctuation\\">:</span> 0.25em 1em</span>;<span class=\\"token string language-css\\">
                      <span class=\\"token property\\">margin</span><span class=\\"token punctuation\\">:</span> 0 1em</span>;<span class=\\"token string language-css\\">
                      <span class=\\"token property\\">background</span><span class=\\"token punctuation\\">:</span> transparent</span>;<span class=\\"token string language-css\\">
                      <span class=\\"token property\\">color</span><span class=\\"token punctuation\\">:</span> palevioletred</span>;<span class=\\"token string language-css\\">
                      <span class=\\"token property\\">border</span><span class=\\"token punctuation\\">:</span> 2px solid palevioletred</span>;<span class=\\"token string language-css\\">
                    
                      </span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">\${</span>props <span class=\\"token operator\\">=</span><span class=\\"token operator\\">></span> props<span class=\\"token punctuation\\">.</span>primario <span class=\\"token operator\\">&amp;&amp;</span> css<span class=\\"token template-string\\"><span class=\\"token string\\">\`
                        background: palevioletred;
                        color: white;
                      \`</span></span><span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string language-css\\">
                    \`</span></span><span class=\\"token punctuation\\">;</span>
                    ",
                    }
                  }
                />
              </styled.pre>
            </CodeBlock>
          </CodeBlock>
          <Paragraph
            literal={null}
            nodeKey="27:1-28:517"
          >
            <p>
              Todo lo que estamos diciendo aquí es que cuando la pripiedad 
              <Code
                inline={true}
                literal="primario"
                nodeKey="27:1-28:511"
              >
                <styled.span>
                  <span
                    className="c10"
                  >
                    primario
                  </span>
                </styled.span>
              </Code>
               esté puesta queremos que añada un poco más de 
              <Code
                inline={true}
                literal="css"
                nodeKey="27:1-28:513"
              >
                <styled.span>
                  <span
                    className="c10"
                  >
                    css
                  </span>
                </styled.span>
              </Code>
               a nuestro componente,
              en este caso, cambiar el color de fondo y el color.
            </p>
          </Paragraph>
          <Paragraph
            literal={null}
            nodeKey="30:1-30:683"
          >
            <p>
              Eso es todo, ¡Hemos acabado! Echa un vistazo al componente terminado
            </p>
          </Paragraph>
          <CodeBlock
            codeinfo={
              Array [
                "react",
              ]
            }
            language="react"
            literal="const Button = styled.button\`
            border-radius: 3px;
            padding: 0.25em 1em;
            margin: 0 1em;
            background: transparent;
            color: palevioletred;
            border: 2px solid palevioletred;
          
            \${props => props.primario && css\`
              background: palevioletred;
              color: white;
            \`}
          \`;
          
          render(
            <div>
              <Button>Botón normal</Button>
              <Button primario>Botón primario</Button>
            </div>
          );
          "
            nodeKey="32:1-53:2"
          >
            <LiveEdit
              code="const Button = styled.button\`
              border-radius: 3px;
              padding: 0.25em 1em;
              margin: 0 1em;
              background: transparent;
              color: palevioletred;
              border: 2px solid palevioletred;
            
              \${props => props.primario && css\`
                background: palevioletred;
                color: white;
              \`}
            \`;
            
            render(
              <div>
                <Button>Botón normal</Button>
                <Button primario>Botón primario</Button>
              </div>
            );
            "
              noInline={true}
            >
              <Styled(LiveProvider)
                code="const Button = styled.button\`
                border-radius: 3px;
                padding: 0.25em 1em;
                margin: 0 1em;
                background: transparent;
                color: palevioletred;
                border: 2px solid palevioletred;
              
                \${props => props.primario && css\`
                  background: palevioletred;
                  color: white;
                \`}
              \`;
              
              render(
                <div>
                  <Button>Botón normal</Button>
                  <Button primario>Botón primario</Button>
                </div>
              );
              "
                mountStylesheet={false}
                noInline={true}
                scope={
                  Object {
                    "ThemeProvider": [Function],
                    "css": [Function],
                    "keyframes": [Function],
                    "styled": [Function],
                    "withTheme": [Function],
                  }
                }
              >
                <LiveProvider
                  className="c16"
                  code="const Button = styled.button\`
                  border-radius: 3px;
                  padding: 0.25em 1em;
                  margin: 0 1em;
                  background: transparent;
                  color: palevioletred;
                  border: 2px solid palevioletred;
                
                  \${props => props.primario && css\`
                    background: palevioletred;
                    color: white;
                  \`}
                \`;
                
                render(
                  <div>
                    <Button>Botón normal</Button>
                    <Button primario>Botón primario</Button>
                  </div>
                );
                "
                  mountStylesheet={false}
                  noInline={true}
                  scope={
                    Object {
                      "ThemeProvider": [Function],
                      "css": [Function],
                      "keyframes": [Function],
                      "styled": [Function],
                      "withTheme": [Function],
                    }
                  }
                >
                  <div
                    className="react-live c16"
                    scope={
                      Object {
                        "ThemeProvider": [Function],
                        "css": [Function],
                        "keyframes": [Function],
                        "styled": [Function],
                        "withTheme": [Function],
                      }
                    }
                  >
                    <styled.div>
                      <div
                        className="c17"
                      >
                        <Styled(LiveEditor)>
                          <Styled(LiveEditor)>
                            <LiveEditor
                              className="c18"
                            >
                              <Editor
                                className="c18"
                                code="const Button = styled.button\`
                                border-radius: 3px;
                                padding: 0.25em 1em;
                                margin: 0 1em;
                                background: transparent;
                                color: palevioletred;
                                border: 2px solid palevioletred;
                              
                                \${props => props.primario && css\`
                                  background: palevioletred;
                                  color: white;
                                \`}
                              \`;
                              
                              render(
                                <div>
                                  <Button>Botón normal</Button>
                                  <Button primario>Botón primario</Button>
                                </div>
                              );
                              "
                                contentEditable={true}
                                onChange={[Function]}
                              >
                                <pre
                                  className="prism-code c18"
                                  contentEditable={true}
                                  dangerouslySetInnerHTML={
                                    Object {
                                      "__html": "<span class=\\"token keyword\\">const</span> Button <span class=\\"token operator\\">=</span> styled<span class=\\"token punctuation\\">.</span>button<span class=\\"token styled-template-string\\"><span class=\\"token string language-css\\">\`
                                    	<span class=\\"token property\\">border-radius</span><span class=\\"token punctuation\\">:</span> 3px</span>;<span class=\\"token string language-css\\">
                                    	<span class=\\"token property\\">padding</span><span class=\\"token punctuation\\">:</span> 0.25em 1em</span>;<span class=\\"token string language-css\\">
                                    	<span class=\\"token property\\">margin</span><span class=\\"token punctuation\\">:</span> 0 1em</span>;<span class=\\"token string language-css\\">
                                    	<span class=\\"token property\\">background</span><span class=\\"token punctuation\\">:</span> transparent</span>;<span class=\\"token string language-css\\">
                                    	<span class=\\"token property\\">color</span><span class=\\"token punctuation\\">:</span> palevioletred</span>;<span class=\\"token string language-css\\">
                                    	<span class=\\"token property\\">border</span><span class=\\"token punctuation\\">:</span> 2px solid palevioletred</span>;<span class=\\"token string language-css\\">
                                    
                                    	</span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">\${</span>props <span class=\\"token operator\\">=</span><span class=\\"token operator\\">></span> props<span class=\\"token punctuation\\">.</span>primario <span class=\\"token operator\\">&amp;&amp;</span> css<span class=\\"token template-string\\"><span class=\\"token string\\">\`
                                    		background: palevioletred;
                                    		color: white;
                                    	\`</span></span><span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string language-css\\">
                                    \`</span></span><span class=\\"token punctuation\\">;</span>
                                    
                                    <span class=\\"token function\\">render</span><span class=\\"token punctuation\\">(</span>
                                    	<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span><span class=\\"token punctuation\\">></span></span>
                                    		<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>Button</span><span class=\\"token punctuation\\">></span></span>Botón normal<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>Button</span><span class=\\"token punctuation\\">></span></span>
                                    		<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>Button</span> <span class=\\"token attr-name\\">primario</span><span class=\\"token punctuation\\">></span></span>Botón primario<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>Button</span><span class=\\"token punctuation\\">></span></span>
                                    	<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">></span></span>
                                    <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>
                                    ",
                                    }
                                  }
                                  onChange={[Function]}
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                />
                              </Editor>
                            </LiveEditor>
                          </Styled(LiveEditor)>
                        </Styled(LiveEditor)>
                        <Styled(LivePreview)>
                          <LivePreview
                            className="c19"
                          >
                            <div
                              className="react-live-preview c19"
                            >
                              <div>
                                <styled.button>
                                  <button
                                    className="c20"
                                  >
                                    Botón normal
                                  </button>
                                </styled.button>
                                <styled.button
                                  primario={true}
                                >
                                  <button
                                    className="c21"
                                  >
                                    Botón primario
                                  </button>
                                </styled.button>
                              </div>
                            </div>
                          </LivePreview>
                        </Styled(LivePreview)>
                      </div>
                    </styled.div>
                    <Styled(LiveError)>
                      <LiveError
                        className="c22"
                      />
                    </Styled(LiveError)>
                  </div>
                </LiveProvider>
              </Styled(LiveProvider)>
            </LiveEdit>
          </CodeBlock>
          <Paragraph
            literal={null}
            nodeKey="55:1-55:1452"
          >
            <p>
              ¡Genial 😍 ese es un editor en vivo también, así que juega un poco con él para obtener una sensación de lo que es trabajar con styled-components!
            </p>
          </Paragraph>
          <Paragraph
            literal={null}
            nodeKey="57:1-57:14710"
          >
            <p>
              Una vez que acabes, ¡Echa un vistazo a la 
              <Link
                href="/docs"
                literal={null}
                nodeKey="57:1-57:1473"
              >
                <Link
                  href="/docs"
                  inline={true}
                >
                  <Link
                    href="/docs"
                  >
                    <styled.a
                      href="/docs"
                      onClick={[Function]}
                    >
                      <a
                        className="c14"
                        href="/docs"
                        onClick={[Function]}
                        rel="noopener"
                        target="_blank"
                      >
                        documentación
                      </a>
                    </styled.a>
                  </Link>
                </Link>
              </Link>
              , especialmente la sección de 
              <Link
                href="/docs/basics#getting-started"
                literal={null}
                nodeKey="57:1-57:1477"
              >
                <Link
                  href="/docs/basics#getting-started"
                  inline={true}
                >
                  <Link
                    href="/docs/basics#getting-started"
                  >
                    <styled.a
                      href="/docs/basics#getting-started"
                      onClick={[Function]}
                    >
                      <a
                        className="c14"
                        href="/docs/basics#getting-started"
                        onClick={[Function]}
                        rel="noopener"
                        target="_blank"
                      >
                        empezando
                      </a>
                    </styled.a>
                  </Link>
                </Link>
              </Link>
              ! Disfruta ✨
            </p>
          </Paragraph>
        </div>
      </div>
    </styled.div>
  </I18n>
</HomepageGettingStarted>
`;
