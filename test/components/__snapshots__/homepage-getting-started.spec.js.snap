// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`HomepageGettingStarted renders correctly 1`] = `
.c0 {
  width: 56.888888888888886rem;
  max-width: 100%;
  margin: 0 auto;
  padding: 2.7777777777777777rem 2.2222222222222223rem 1.6666666666666667rem 2.2222222222222223rem;
  box-sizing: border-box;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
}

.c3 {
  display: block;
  text-align: left;
  width: 100%;
  color: rgb(243, 182, 97);
  font-size: 2.3333333333333335rem;
  font-weight: bold;
  font-family: "Avenir Next", -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
}

.c4 {
  font-size: 1.7777777777777777rem;
  font-weight: 500;
  font-family: "Avenir Next", -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
}

.c11 {
  box-shadow: 0.05555555555555555rem 0.05555555555555555rem 1.1111111111111112rem rgba(20, 20, 20, 0.27);
  overflow: hidden;
  margin: 1.9444444444444444rem 0;
  text-align: left;
}

.c12 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: stretch;
  -webkit-justify-content: stretch;
  -ms-flex-pack: stretch;
  justify-content: stretch;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
}

.c13 {
  background: #1d1f27;
  font-size: 0.8rem;
  font-family: "Operator Mono SSm A", "Operator Mono SSm B", monospace;
  font-weight: 300;
  height: 22.22222222222222rem;
  overflow-y: scroll;
  overflow-x: hidden;
  cursor: text;
  white-space: pre-wrap;
  -webkit-flex-basis: 50%;
  -ms-flex-basis: 50%;
  flex-basis: 50%;
  width: 50%;
  max-width: 50%;
}

.c14 {
  position: relative;
  padding: 0.5rem;
  background: white;
  color: black;
  height: auto;
  overflow: hidden;
  -webkit-flex-basis: 50%;
  -ms-flex-basis: 50%;
  flex-basis: 50%;
  width: 50%;
  max-width: 50%;
}

.c17 {
  display: block;
  width: 100%;
  padding: 0.4444444444444444rem;
  background: #ff5555;
  color: white;
  font-size: 0.8rem;
  font-family: "Avenir Next", -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  white-space: pre;
}

.c8 {
  background: #1d1f27;
  font-size: 0.8rem;
  font-family: "Operator Mono SSm A", "Operator Mono SSm B", monospace;
  font-weight: 300;
  white-space: pre-wrap;
  border-radius: 0.16666666666666666rem;
  box-shadow: 1px 1px 20px rgba(20, 20, 20, 0.27);
  margin: 1.9444444444444444rem 0;
  overflow-x: hidden;
}

.c5 {
  font-family: "Operator Mono SSm A", "Operator Mono SSm B", monospace;
  font-weight: 500;
}

.c9 {
  color: rgb(219, 112, 147);
  text-decoration: underline;
  font-weight: 600;
  cursor: pointer;
}

.c1 {
  text-align: center;
}

.c2 {
  margin: 0 0.5em 3em;
  height: 1.5em;
}

.c6 {
  border-radius: 3px;
  padding: 0.25em 1em;
  margin: 0 1em;
  background: transparent;
  color: palevioletred;
  border: 2px solid palevioletred;
}

.c7 {
  border-radius: 3px;
  padding: 0.25em 1em;
  margin: 0 1em;
  background: transparent;
  color: palevioletred;
  border: 2px solid palevioletred;
  background: palevioletred;
  color: white;
}

.c10 {
  border-radius: 3px;
  padding: 0.25em 1em;
  background: transparent;
  color: palevioletred;
  border: 2px solid palevioletred;
}

.c15 {
  border-radius: 3px;
  padding: 0.25em 1em;
  margin: 0 1em;
  background: transparent;
  color: palevioletred;
  border: 2px solid palevioletred;
}

.c16 {
  border-radius: 3px;
  padding: 0.25em 1em;
  margin: 0 1em;
  background: transparent;
  color: palevioletred;
  border: 2px solid palevioletred;
  background: palevioletred;
  color: white;
}

@media (max-width: 62.5em) {
  .c0 {
    padding: 1.6666666666666667rem 1.1111111111111112rem;
  }
}

@media (max-width: 40.625em) {
  .c12 {
    -webkit-flex-direction: column;
    -ms-flex-direction: column;
    flex-direction: column;
  }
}

@media (max-width: 40.625em) {
  .c13 {
    -webkit-flex-basis: auto;
    -ms-flex-basis: auto;
    flex-basis: auto;
    width: 100%;
    max-width: 100%;
    height: auto;
  }
}

@media (max-width: 40.625em) {
  .c14 {
    -webkit-flex-basis: auto;
    -ms-flex-basis: auto;
    flex-basis: auto;
    width: 100%;
    max-width: 100%;
    height: auto;
  }
}

<HomepageGettingStarted>
  <styled.div>
    <div
      className="c0"
    >
      <styled.div>
        <div
          className="c1"
        >
          <a
            href="https://github.com/styled-components/styled-components"
          >
            <styled.img
              alt="Stars on GitHub"
              src="https://img.shields.io/github/stars/styled-components/styled-components.svg?style=social&label=Star&maxAge=3600"
            >
              <img
                alt="Stars on GitHub"
                className="c2"
                src="https://img.shields.io/github/stars/styled-components/styled-components.svg?style=social&label=Star&maxAge=3600"
              />
            </styled.img>
          </a>
          <a
            href="https://www.npmjs.com/package/styled-components"
          >
            <styled.img
              alt="Current version"
              src="https://img.shields.io/npm/v/styled-components.svg"
            >
              <img
                alt="Current version"
                className="c2"
                src="https://img.shields.io/npm/v/styled-components.svg"
              />
            </styled.img>
          </a>
          <styled.img
            alt="Monthly downloads"
            src="https://img.shields.io/npm/dm/styled-components.svg?maxAge=3600"
          >
            <img
              alt="Monthly downloads"
              className="c2"
              src="https://img.shields.io/npm/dm/styled-components.svg?maxAge=3600"
            />
          </styled.img>
          <styled.img
            alt="Gzipped size"
            src="http://img.badgesize.io/https://unpkg.com/styled-components/dist/styled-components.min.js?compression=gzip&label=gzip%20size"
          >
            <img
              alt="Gzipped size"
              className="c2"
              src="http://img.badgesize.io/https://unpkg.com/styled-components/dist/styled-components.min.js?compression=gzip&label=gzip%20size"
            />
          </styled.img>
          <a
            href="https://spectrum.chat/styled-components"
          >
            <styled.img
              alt="Join the community on Spectrum"
              src="https://withspectrum.github.io/badge/badge.svg"
            >
              <img
                alt="Join the community on Spectrum"
                className="c2"
                src="https://withspectrum.github.io/badge/badge.svg"
              />
            </styled.img>
          </a>
        </div>
      </styled.div>
      <styled.h1>
        <h1
          className="c3"
        >
          Getting started
        </h1>
      </styled.h1>
      <styled.h2>
        <h2
          className="c4"
        >
          Installation
        </h2>
      </styled.h2>
      <p>
        To download styled-components run 
        <styled.span>
          <span
            className="c5"
          >
            npm install --save styled-components
          </span>
        </styled.span>
        . That's all you need to do, you are now ready to use it in your app! (yep, no build step needed 👌)
      </p>
      <styled.h2>
        <h2
          className="c4"
        >
          Your first styled component
        </h2>
      </styled.h2>
      <p>
        Let's say you want to create a simple and reusable 
        <styled.span>
          <span
            className="c5"
          >
            &lt;Button /&gt;
          </span>
        </styled.span>
         component that you can use throughout your application. There should be a normal version and a big and 
        <styled.span>
          <span
            className="c5"
          >
            primary
          </span>
        </styled.span>
         version for the important buttons. This is what it should look like when rendered: (this is a live example, click on them!)
      </p>
      <styled.div>
        <div
          className="c1"
        >
          <styled.button
            onClick={[Function]}
          >
            <button
              className="c6"
              onClick={[Function]}
            >
              Normal button
            </button>
          </styled.button>
          <styled.button
            onClick={[Function]}
            primary={true}
          >
            <button
              className="c7"
              onClick={[Function]}
            >
              Primary button
            </button>
          </styled.button>
        </div>
      </styled.div>
      <p>
        First, let's import styled-components and create a 
        <styled.span>
          <span
            className="c5"
          >
            styled.button
          </span>
        </styled.span>
        :
      </p>
      <CodeBlock
        code="import styled from 'styled-components';
      
      const Button = styled.button\`\`;"
        language="jsx"
      >
        <styled.pre
          dangerouslySetInnerHTML={
            Object {
              "__html": "<span class=\\"token keyword\\">import</span> styled <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'styled-components'</span><span class=\\"token punctuation\\">;</span>
            
            <span class=\\"token keyword\\">const</span> Button <span class=\\"token operator\\">=</span> styled<span class=\\"token punctuation\\">.</span>button<span class=\\"token styled-template-string\\"><span class=\\"token string language-css\\">\`\`</span></span><span class=\\"token punctuation\\">;</span>",
            }
          }
        >
          <pre
            className="prism-code c8"
            dangerouslySetInnerHTML={
              Object {
                "__html": "<span class=\\"token keyword\\">import</span> styled <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'styled-components'</span><span class=\\"token punctuation\\">;</span>
              
              <span class=\\"token keyword\\">const</span> Button <span class=\\"token operator\\">=</span> styled<span class=\\"token punctuation\\">.</span>button<span class=\\"token styled-template-string\\"><span class=\\"token string language-css\\">\`\`</span></span><span class=\\"token punctuation\\">;</span>",
              }
            }
          />
        </styled.pre>
      </CodeBlock>
      <p>
        This 
        <styled.span>
          <span
            className="c5"
          >
            Button
          </span>
        </styled.span>
         variable here is now a React component that you can use like any other React component! This unusual backtick syntax is a new JavaScript feature called a tagged template literal. You know how you can call functions with parenthesis? (
        <styled.span>
          <span
            className="c5"
          >
            myFunc()
          </span>
        </styled.span>
        ) Well, now you can also call functions with backticks! (
        <styled.span>
          <span
            className="c5"
          >
            myFunc\`\`
          </span>
        </styled.span>
        , 
        <Link
          href="/docs/advanced#tagged-template-literals"
          inline={true}
        >
          <Link
            href="/docs/advanced#tagged-template-literals"
          >
            <styled.a
              href="/docs/advanced#tagged-template-literals"
              onClick={[Function]}
            >
              <a
                className="c9"
                href="/docs/advanced#tagged-template-literals"
                onClick={[Function]}
                rel="noopener"
                target="_blank"
              >
                here is an explanation
              </a>
            </styled.a>
          </Link>
        </Link>
         of how that works exactly)
      </p>
      <p>
        If you render our lovely component now (just like any other component: 
        <styled.span>
          <span
            className="c5"
          >
            &lt;Button /&gt;
          </span>
        </styled.span>
        ) this is what you get:
      </p>
      <styled.div>
        <div
          className="c1"
        >
          <button>
            I'm a &lt;Button /&gt;!
          </button>
        </div>
      </styled.div>
      <p>
        It renders a button! That's not a very nice button though 😕 we can do better than this, let's give it a bit of styling and tickle out the hidden beauty within!
      </p>
      <CodeBlock
        code="const Button = styled.button\`
        border-radius: 3px;
        padding: 0.25em 1em;
        margin: 0 1em;
        background: transparent;
        color: palevioletred;
        border: 2px solid palevioletred;
      \`"
        language="jsx"
      >
        <styled.pre
          dangerouslySetInnerHTML={
            Object {
              "__html": "<span class=\\"token keyword\\">const</span> Button <span class=\\"token operator\\">=</span> styled<span class=\\"token punctuation\\">.</span>button<span class=\\"token styled-template-string\\"><span class=\\"token string language-css\\">\`
              <span class=\\"token property\\">border-radius</span><span class=\\"token punctuation\\">:</span> 3px<span class=\\"token punctuation\\">;</span>
              <span class=\\"token property\\">padding</span><span class=\\"token punctuation\\">:</span> 0.25em 1em<span class=\\"token punctuation\\">;</span>
              <span class=\\"token property\\">margin</span><span class=\\"token punctuation\\">:</span> 0 1em<span class=\\"token punctuation\\">;</span>
              <span class=\\"token property\\">background</span><span class=\\"token punctuation\\">:</span> transparent<span class=\\"token punctuation\\">;</span>
              <span class=\\"token property\\">color</span><span class=\\"token punctuation\\">:</span> palevioletred<span class=\\"token punctuation\\">;</span>
              <span class=\\"token property\\">border</span><span class=\\"token punctuation\\">:</span> 2px solid palevioletred<span class=\\"token punctuation\\">;</span>
            \`</span></span>",
            }
          }
        >
          <pre
            className="prism-code c8"
            dangerouslySetInnerHTML={
              Object {
                "__html": "<span class=\\"token keyword\\">const</span> Button <span class=\\"token operator\\">=</span> styled<span class=\\"token punctuation\\">.</span>button<span class=\\"token styled-template-string\\"><span class=\\"token string language-css\\">\`
                <span class=\\"token property\\">border-radius</span><span class=\\"token punctuation\\">:</span> 3px<span class=\\"token punctuation\\">;</span>
                <span class=\\"token property\\">padding</span><span class=\\"token punctuation\\">:</span> 0.25em 1em<span class=\\"token punctuation\\">;</span>
                <span class=\\"token property\\">margin</span><span class=\\"token punctuation\\">:</span> 0 1em<span class=\\"token punctuation\\">;</span>
                <span class=\\"token property\\">background</span><span class=\\"token punctuation\\">:</span> transparent<span class=\\"token punctuation\\">;</span>
                <span class=\\"token property\\">color</span><span class=\\"token punctuation\\">:</span> palevioletred<span class=\\"token punctuation\\">;</span>
                <span class=\\"token property\\">border</span><span class=\\"token punctuation\\">:</span> 2px solid palevioletred<span class=\\"token punctuation\\">;</span>
              \`</span></span>",
              }
            }
          />
        </styled.pre>
      </CodeBlock>
      <styled.div>
        <div
          className="c1"
        >
          <styled.button>
            <button
              className="c10"
            >
              I'm a styled &lt;Button /&gt;
            </button>
          </styled.button>
        </div>
      </styled.div>
      <p>
        As you can see, styled-components lets you write actual CSS in your JavaScript. This means you can use all the features of CSS you use and love, including (but by far not limited to) media queries, all pseudo-selectors, nesting, etc. It also binds styles to components, which has some interesting properties. (learn more about 
        <Link
          href="/docs/basics#motivation"
          inline={true}
        >
          <Link
            href="/docs/basics#motivation"
          >
            <styled.a
              href="/docs/basics#motivation"
              onClick={[Function]}
            >
              <a
                className="c9"
                href="/docs/basics#motivation"
                onClick={[Function]}
                rel="noopener"
                target="_blank"
              >
                the ideas behind styled-components here
              </a>
            </styled.a>
          </Link>
        </Link>
        )
      </p>
      <p>
        The last step is that we need to define what a primary button looks like. To do that we interpolate a function into our template literal, which gets passed the props of our component:
      </p>
      <CodeBlock
        code="const Button = styled.button\`
        border-radius: 3px;
        padding: 0.25em 1em;
        margin: 0 1em;
        background: transparent;
        color: palevioletred;
        border: 2px solid palevioletred;
      
        \${props => props.primary && css\`
          background: palevioletred;
          color: white;
        \`}
      \`"
        language="jsx"
      >
        <styled.pre
          dangerouslySetInnerHTML={
            Object {
              "__html": "<span class=\\"token keyword\\">const</span> Button <span class=\\"token operator\\">=</span> styled<span class=\\"token punctuation\\">.</span>button<span class=\\"token styled-template-string\\"><span class=\\"token string language-css\\">\`
              <span class=\\"token property\\">border-radius</span><span class=\\"token punctuation\\">:</span> 3px<span class=\\"token punctuation\\">;</span>
              <span class=\\"token property\\">padding</span><span class=\\"token punctuation\\">:</span> 0.25em 1em<span class=\\"token punctuation\\">;</span>
              <span class=\\"token property\\">margin</span><span class=\\"token punctuation\\">:</span> 0 1em<span class=\\"token punctuation\\">;</span>
              <span class=\\"token property\\">background</span><span class=\\"token punctuation\\">:</span> transparent<span class=\\"token punctuation\\">;</span>
              <span class=\\"token property\\">color</span><span class=\\"token punctuation\\">:</span> palevioletred<span class=\\"token punctuation\\">;</span>
              <span class=\\"token property\\">border</span><span class=\\"token punctuation\\">:</span> 2px solid palevioletred<span class=\\"token punctuation\\">;</span>
            
              </span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">\${</span>props <span class=\\"token operator\\">=</span><span class=\\"token operator\\">></span> props<span class=\\"token punctuation\\">.</span>primary <span class=\\"token operator\\">&amp;&amp;</span> css<span class=\\"token template-string\\"><span class=\\"token string\\">\`
                background: palevioletred;
                color: white;
              \`</span></span><span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string language-css\\">
            \`</span></span>",
            }
          }
        >
          <pre
            className="prism-code c8"
            dangerouslySetInnerHTML={
              Object {
                "__html": "<span class=\\"token keyword\\">const</span> Button <span class=\\"token operator\\">=</span> styled<span class=\\"token punctuation\\">.</span>button<span class=\\"token styled-template-string\\"><span class=\\"token string language-css\\">\`
                <span class=\\"token property\\">border-radius</span><span class=\\"token punctuation\\">:</span> 3px<span class=\\"token punctuation\\">;</span>
                <span class=\\"token property\\">padding</span><span class=\\"token punctuation\\">:</span> 0.25em 1em<span class=\\"token punctuation\\">;</span>
                <span class=\\"token property\\">margin</span><span class=\\"token punctuation\\">:</span> 0 1em<span class=\\"token punctuation\\">;</span>
                <span class=\\"token property\\">background</span><span class=\\"token punctuation\\">:</span> transparent<span class=\\"token punctuation\\">;</span>
                <span class=\\"token property\\">color</span><span class=\\"token punctuation\\">:</span> palevioletred<span class=\\"token punctuation\\">;</span>
                <span class=\\"token property\\">border</span><span class=\\"token punctuation\\">:</span> 2px solid palevioletred<span class=\\"token punctuation\\">;</span>
              
                </span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">\${</span>props <span class=\\"token operator\\">=</span><span class=\\"token operator\\">></span> props<span class=\\"token punctuation\\">.</span>primary <span class=\\"token operator\\">&amp;&amp;</span> css<span class=\\"token template-string\\"><span class=\\"token string\\">\`
                  background: palevioletred;
                  color: white;
                \`</span></span><span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string language-css\\">
              \`</span></span>",
              }
            }
          />
        </styled.pre>
      </CodeBlock>
      <p>
        All we're saying here is that when the 
        <styled.span>
          <span
            className="c5"
          >
            primary
          </span>
        </styled.span>
         property is set we want to add some more 
        <styled.span>
          <span
            className="c5"
          >
            css
          </span>
        </styled.span>
         to our component, in this case change the background and color.
      </p>
      <p>
        That's all, we're done! Take a look at our finished component:
      </p>
      <LiveEdit
        code="const Button = styled.button\`
        border-radius: 3px;
        padding: 0.25em 1em;
        margin: 0 1em;
        background: transparent;
        color: palevioletred;
        border: 2px solid palevioletred;
      
        \${props => props.primary && css\`
          background: palevioletred;
          color: white;
        \`}
      \`
      
      render(
        <div>
          <Button>Normal Button</Button>
          <Button primary>Primary Button</Button>
        </div>
      )"
        noInline={true}
      >
        <Styled(LiveProvider)
          code="const Button = styled.button\`
          border-radius: 3px;
          padding: 0.25em 1em;
          margin: 0 1em;
          background: transparent;
          color: palevioletred;
          border: 2px solid palevioletred;
        
          \${props => props.primary && css\`
            background: palevioletred;
            color: white;
          \`}
        \`
        
        render(
          <div>
            <Button>Normal Button</Button>
            <Button primary>Primary Button</Button>
          </div>
        )"
          mountStylesheet={false}
          noInline={true}
          scope={
            Object {
              "css": [Function],
              "keyframes": [Function],
              "styled": [Function],
            }
          }
        >
          <LiveProvider
            className="c11"
            code="const Button = styled.button\`
            border-radius: 3px;
            padding: 0.25em 1em;
            margin: 0 1em;
            background: transparent;
            color: palevioletred;
            border: 2px solid palevioletred;
          
            \${props => props.primary && css\`
              background: palevioletred;
              color: white;
            \`}
          \`
          
          render(
            <div>
              <Button>Normal Button</Button>
              <Button primary>Primary Button</Button>
            </div>
          )"
            mountStylesheet={false}
            noInline={true}
            scope={
              Object {
                "css": [Function],
                "keyframes": [Function],
                "styled": [Function],
              }
            }
          >
            <div
              className="react-live c11"
              scope={
                Object {
                  "css": [Function],
                  "keyframes": [Function],
                  "styled": [Function],
                }
              }
            >
              <styled.div>
                <div
                  className="c12"
                >
                  <Styled(LiveEditor)>
                    <Styled(LiveEditor)>
                      <LiveEditor
                        className="c13"
                      >
                        <Editor
                          className="c13"
                          code="const Button = styled.button\`
                          border-radius: 3px;
                          padding: 0.25em 1em;
                          margin: 0 1em;
                          background: transparent;
                          color: palevioletred;
                          border: 2px solid palevioletred;
                        
                          \${props => props.primary && css\`
                            background: palevioletred;
                            color: white;
                          \`}
                        \`
                        
                        render(
                          <div>
                            <Button>Normal Button</Button>
                            <Button primary>Primary Button</Button>
                          </div>
                        )"
                          contentEditable={true}
                          onChange={[Function]}
                        >
                          <pre
                            className="prism-code c13"
                            contentEditable={true}
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<span class=\\"token keyword\\">const</span> Button <span class=\\"token operator\\">=</span> styled<span class=\\"token punctuation\\">.</span>button<span class=\\"token styled-template-string\\"><span class=\\"token string language-css\\">\`
                              	<span class=\\"token property\\">border-radius</span><span class=\\"token punctuation\\">:</span> 3px<span class=\\"token punctuation\\">;</span>
                              	<span class=\\"token property\\">padding</span><span class=\\"token punctuation\\">:</span> 0.25em 1em<span class=\\"token punctuation\\">;</span>
                              	<span class=\\"token property\\">margin</span><span class=\\"token punctuation\\">:</span> 0 1em<span class=\\"token punctuation\\">;</span>
                              	<span class=\\"token property\\">background</span><span class=\\"token punctuation\\">:</span> transparent<span class=\\"token punctuation\\">;</span>
                              	<span class=\\"token property\\">color</span><span class=\\"token punctuation\\">:</span> palevioletred<span class=\\"token punctuation\\">;</span>
                              	<span class=\\"token property\\">border</span><span class=\\"token punctuation\\">:</span> 2px solid palevioletred<span class=\\"token punctuation\\">;</span>
                              
                              	</span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">\${</span>props <span class=\\"token operator\\">=</span><span class=\\"token operator\\">></span> props<span class=\\"token punctuation\\">.</span>primary <span class=\\"token operator\\">&amp;&amp;</span> css<span class=\\"token template-string\\"><span class=\\"token string\\">\`
                              		background: palevioletred;
                              		color: white;
                              	\`</span></span><span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string language-css\\">
                              \`</span></span>
                              
                              <span class=\\"token function\\">render</span><span class=\\"token punctuation\\">(</span>
                              	<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span><span class=\\"token punctuation\\">></span></span>
                              		<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>Button</span><span class=\\"token punctuation\\">></span></span>Normal Button<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>Button</span><span class=\\"token punctuation\\">></span></span>
                              		<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>Button</span> <span class=\\"token attr-name\\">primary</span><span class=\\"token punctuation\\">></span></span>Primary Button<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>Button</span><span class=\\"token punctuation\\">></span></span>
                              	<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">></span></span>
                              <span class=\\"token punctuation\\">)</span>",
                              }
                            }
                            onChange={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                          />
                        </Editor>
                      </LiveEditor>
                    </Styled(LiveEditor)>
                  </Styled(LiveEditor)>
                  <Styled(LivePreview)>
                    <LivePreview
                      className="c14"
                    >
                      <div
                        className="react-live-preview c14"
                      >
                        <div>
                          <styled.button>
                            <button
                              className="c15"
                            >
                              Normal Button
                            </button>
                          </styled.button>
                          <styled.button
                            primary={true}
                          >
                            <button
                              className="c16"
                            >
                              Primary Button
                            </button>
                          </styled.button>
                        </div>
                      </div>
                    </LivePreview>
                  </Styled(LivePreview)>
                </div>
              </styled.div>
              <Styled(LiveError)>
                <LiveError
                  className="c17"
                />
              </Styled(LiveError)>
            </div>
          </LiveProvider>
        </Styled(LiveProvider)>
      </LiveEdit>
      <p>
        Nice 😍 That's a live updating editor too, so play around with it a bit to get a feel for what it's like to work with styled-components!
      </p>
      <p>
        Once you're done take a look at the 
        <Link
          href="/docs"
          inline={true}
          prefetch={true}
        >
          <Link
            href="/docs"
            prefetch={true}
          >
            <styled.a
              href="/docs"
              onClick={[Function]}
            >
              <a
                className="c9"
                href="/docs"
                onClick={[Function]}
                rel="noopener"
                target="_blank"
              >
                documentation
              </a>
            </styled.a>
          </Link>
        </Link>
        , specifically the 
        <Link
          href="/docs/basics#getting-started"
          inline={true}
          prefetch={true}
        >
          <Link
            href="/docs/basics#getting-started"
            prefetch={true}
          >
            <styled.a
              href="/docs/basics#getting-started"
              onClick={[Function]}
            >
              <a
                className="c9"
                href="/docs/basics#getting-started"
                onClick={[Function]}
                rel="noopener"
                target="_blank"
              >
                Getting started
              </a>
            </styled.a>
          </Link>
        </Link>
         section! Enjoy ✨
      </p>
    </div>
  </styled.div>
</HomepageGettingStarted>
`;
