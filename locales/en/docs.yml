title: Documentation
description: Learn how to use styled-components and to style your apps without stress
about: Utilising tagged template literals (a recent addition to JavaScript) and the power of CSS, styled-components allows you to write actual CSS code to style your components. It also removes the mapping between components and styles – using components as a low-level styling construct could not be easier!
basics: Basics
basicsDescription: Get Started with styled-components basics.
motivation: |
  ## Motivation

  This talk by Max Stoiber is a really thorough introduction to styled-components
  and goes through what the motivations behind its creation were, along with some
  other information to get started with.
advanced: Advanced
installation: |
  ## Installation

  Install styled-components from npm:

  ```
  npm install --save styled-components
  ```
gettingStarted: |
  ## Getting Started

  styled-components utilises tagged template literals to style your components.

  It removes the mapping between components and styles. This means that when you're defining your styles,
  you're actually creating a normal React component, that has your styles attached to it.

  This example creates two simple components, a wrapper and a title, with some styles attached to it.
  You can edit the code and get a feel for how you'd work with styled-components.

  ```react
  // Create a Title component that'll render an <h1> tag with some styles
  const Title = styled.h1`
    font-size: 1.5em;
    text-align: center;
    color: palevioletred;
  `;

  // Create a Wrapper component that'll render a <section> tag with some styles
  const Wrapper = styled.section`
    padding: 4em;
    background: papayawhip;
  `;

  // Use Title and Wrapper like any other React component – except they're styled!
  render(
    <Wrapper>
      <Title>
        Hello World, this is my first styled component!
      </Title>
    </Wrapper>
  );
  ```

  > The CSS rules are automatically vendor prefixed, so you don't have to think about it.
passedProps: |
  ## Passed props

  styled-components pass on all their props.

  This example shows how all props of the Input component are passed on to the
  DOM node that is mounted, as with React elements.

  ```react
  // Create an Input component that'll render an <input> tag with some styles
  const Input = styled.input`
    padding: 0.5em;
    margin: 0.5em;
    color: palevioletred;
    background: papayawhip;
    border: none;
    border-radius: 3px;
  `;

  // Render a styled text input with a placeholder of "@mxstbr", and one with a value of "@geelen"
  render(
    <div>
      <Input placeholder="@mxstbr" type="text" />
      <Input value="@geelen" type="text" />
    </div>
  );
  ```
adaptingBasedOnProps: |
  ## Adapting based on props

  You can pass a function ("interpolations") to a styled component's template literal
  to adapt it based on its props.

  This button component has a primary state that changes its colour.
  When setting the <Code>primary</Code> prop to true, we are swapping out its background and text colour.

  ```react
  const Button = styled.button`
    /* Adapt the colours based on primary prop */
    background: ${props => props.primary ? 'palevioletred' : 'white'};
    color: ${props => props.primary ? 'white' : 'palevioletred'};

    font-size: 1em;
    margin: 1em;
    padding: 0.25em 1em;
    border: 2px solid palevioletred;
    border-radius: 3px;
  `;

  render(
    <div>
      <Button>Normal</Button>
      <Button primary>Primary</Button>
    </div>
  );
  ```
stylingAnyComponents: |
  ## Styling any components

  The `styled` method works perfectly on all of your own or any third-party
  components as well, as long as they pass the `className` prop to their rendered sub-components,
  which should pass it too, and so on.
  Ultimately, the `className` must be passed down the line to an actual DOM node for the styling to take any effect.

  > If you are using `react-native` keep in mind to use `style` instead of `className`.

  If you're using any external library, you can consider using this pattern to turn them
  into styled components. The same pattern works for your own components as well, if you
  need some components to stay unstyled on their own.

  ```react
  // This could be react-router's Link for example
  const Link = ({ className, children }) => (
    <a className={className}>
      {children}
    </a>
  )

  const StyledLink = styled(Link)`
    color: palevioletred;
    font-weight: bold;
  `;

  render(
    <div>
      <Link>Unstyled, boring Link</Link>
      <br />
      <StyledLink>Styled, exciting Link</StyledLink>
    </div>
  );
  ```

  Consider carefully whether to wrap your own components in a styled component, when it isn't necessary.
  You will disable the automatic whitelisting of props, and reverse the recommended order of styled
  components and structural components.

  You can also pass tag names into the `styled()` factory call, like so: `styled('div')`.
  In fact, the `styled.tagname` helpers are just aliases that do the same.

  > styled-components always generates a real stylesheet with classes.
  > The classnames are then passed to the React component (including third party components)
  > via the `className` prop.
